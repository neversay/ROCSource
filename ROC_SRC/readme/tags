AIPH	memwatch.c	/^#define AIPH() if( always_invoked ) { mwWrite("aut/
CHKVAL	memwatch.c	/^#define CHKVAL(mw)  (0xFE0180L^(long)mw->count^(lo/
FLUSH	memwatch.c	/^#define FLUSH()     mwFlush()$/
GET_DODGE	handler.c	/^int GET_DODGE( CHAR_DATA * ch )$/
GET_SVS	handler.c	/^int GET_SVS( CHAR_DATA * ch){$/
IS_SET	test.c	/^#define IS_SET( flag, bit )	   ( ( flag ) &	  ( bi/
KEY	db.c	/^#define KEY( literal, field, value )		    \\$/
MPEDIT	olc_act.c	/^#define MPEDIT( fun )		bool fun( CHAR_DATA *ch, ch/
MW_MUTEX_INIT	memwatch.c	/^#define MW_MUTEX_INIT()		mwMutexInit()$/
MW_MUTEX_LOCK	memwatch.c	/^#define MW_MUTEX_LOCK()		mwMutexLock()$/
MW_MUTEX_TERM	memwatch.c	/^#define MW_MUTEX_TERM()		mwMutexTerm()$/
MW_MUTEX_UNLOCK	memwatch.c	/^#define MW_MUTEX_UNLOCK()	mwMutexUnlock()$/
Mcomm	comm.c	/^int main( int argc, char **argv )$/
MemWatch	memwatch.c	/^MemWatch::MemWatch() {$/
Mtest	test.c	/^int main()$/
NEW_GET_SVS	handler.c	/^int NEW_GET_SVS( CHAR_DATA * ch,int type){$/
REMOVE_BIT	test.c	/^#define REMOVE_BIT( var, bit )	      ( ( var )	 &=/
SET_BIT	test.c	/^#define SET_BIT( var, bit )	   ( ( var )  |=  ( bi/
SKEY	db.c	/^#define SKEY( string, field )			    \\$/
TESTS	memwatch.c	/^#define TESTS(f,l)  if(mwTestAlways) (void)mwTestN/
WAIT_STATE	handler.c	/^void WAIT_STATE( CHAR_DATA *ch, int wait)$/
__attribute	comm.c	/^#define __attribute( x )$/
_damage	fight.c	/^void _damage( CHAR_DATA *ch, CHAR_DATA *victim, in/
act	comm.c	/^void act( const char *format, CHAR_DATA *ch, const/
act_bit_name	handler.c	/^char *act_bit_name( long long int vector )$/
action_next_command	update.c	/^char *action_next_command( char *clist )$/
action_process_cmnd	update.c	/^void action_process_cmnd( char *cmnd, CHAR_DATA *m/
action_read_programs	db.c	/^void action_read_programs( FILE *fp, MOB_INDEX_DAT/
add_call_out	handler.c	/^void add_call_out( CALL_OUT_DATA * call)$/
add_follower	act_comm.c	/^void add_follower( CHAR_DATA *ch, CHAR_DATA *maste/
add_protector	act_comm.c	/^void add_protector( CHAR_DATA *ch, CHAR_DATA *pch /
add_rember	act_comm.c	/^void add_rember( CHAR_DATA *ch, CHAR_DATA *pch )$/
add_reset	olc.c	/^void add_reset( ROOM_INDEX_DATA *room, RESET_DATA /
add_rrember	act_comm.c	/^void add_rrember( ROOM_INDEX_DATA *room, CHAR_DATA/
advance_level	update.c	/^void advance_level( CHAR_DATA *ch )$/
aedit	olc.c	/^void aedit( CHAR_DATA *ch, char *argument )$/
aedit_age	olc_act.c	/^bool aedit_age( CHAR_DATA *ch, char *argument )$/
aedit_builder	olc_act.c	/^bool aedit_builder( CHAR_DATA *ch, char *argument /
aedit_create	olc_act.c	/^bool aedit_create( CHAR_DATA *ch, char *argument )/
aedit_file	olc_act.c	/^bool aedit_file( CHAR_DATA *ch, char *argument )$/
aedit_ftoggle	olc_act.c	/^bool aedit_ftoggle( CHAR_DATA *ch, char *argument /
aedit_identity	olc_act.c	/^bool aedit_identity( CHAR_DATA *ch, char *argument/
aedit_lvnum	olc_act.c	/^bool aedit_lvnum( CHAR_DATA *ch, char *argument )$/
aedit_name	olc_act.c	/^bool aedit_name( CHAR_DATA *ch, char *argument )$/
aedit_olist	olc_act.c	/^bool aedit_olist( CHAR_DATA *ch, char * arg)$/
aedit_recall	olc_act.c	/^bool aedit_recall( CHAR_DATA *ch, char *argument )/
aedit_reset	olc_act.c	/^bool aedit_reset( CHAR_DATA *ch, char *argument )$/
aedit_rlist	olc_act.c	/^bool aedit_rlist( CHAR_DATA *ch, char * arg)$/
aedit_save	olc_save.c	/^bool aedit_save( CHAR_DATA *ch, char * arg)$/
aedit_security	olc_act.c	/^bool aedit_security( CHAR_DATA *ch, char *argument/
aedit_show	olc_act.c	/^bool aedit_show( CHAR_DATA *ch, char *argument )$/
aedit_uvnum	olc_act.c	/^bool aedit_uvnum( CHAR_DATA *ch, char *argument )$/
aedit_vnum	olc_act.c	/^bool aedit_vnum( CHAR_DATA *ch, char *argument )$/
affect_bit_name	handler.c	/^char *affect_bit_name( long long int vector )$/
affect_join	handler.c	/^void affect_join( CHAR_DATA *ch, AFFECT_DATA *paf /
affect_loc_name	handler.c	/^char *affect_loc_name( int location )$/
affect_lookup	handler.c	/^int affect_lookup( const char *affectname )$/
affect_modify	handler.c	/^void affect_modify( CHAR_DATA *ch, AFFECT_DATA *pa/
affect_remove	handler.c	/^void affect_remove( CHAR_DATA *ch, AFFECT_DATA *pa/
affect_strip	handler.c	/^void affect_strip( CHAR_DATA *ch, int sn )$/
affect_to_char	handler.c	/^void affect_to_char( CHAR_DATA *ch, AFFECT_DATA *p/
affect_to_room	handler.c	/^void affect_to_room( ROOM_INDEX_DATA *ch, R_AFFECT/
aggr_check	act_move.c	/^void aggr_check( CHAR_DATA *ch, ROOM_INDEX_DATA * /
aggr_update	update.c	/^void aggr_update( void )$/
alignment_color	act_info.c	/^char* alignment_color(int align)$/
all_capitalize	string.c	/^char* all_capitalize( const char *str )$/
alloc_mem	memory.c	/^void *alloc_mem( int sMem )$/
alloc_perm	memory.c	/^void *alloc_perm( int sMem )$/
append_file	db.c	/^void append_file( CHAR_DATA *ch, char *file, char /
apply_ac	handler.c	/^int apply_ac( OBJ_DATA *obj, int iWear )$/
area_update	db.c	/^void area_update( void )$/
assign_area_vnum	db.c	/^void assign_area_vnum( int vnum )$/
atoll	db.c	/^long long int atoll( char* str)$/
authorized	handler.c	/^bool authorized( CHAR_DATA *ch, char *skllnm )$/
ban_update	update.c	/^void ban_update( void )$/
bank_desc	clan.c	/^char* bank_desc(long long int bank)$/
boot_db	db.c	/^void boot_db( void )$/
boot_done	ssm.c	/^void boot_done( void )$/
bug	db.c	/^void bug( const char *str, int param )$/
bugf	db.c	/^void bugf( char * fmt, ... )$/
bust_a_prompt	comm.c	/^void bust_a_prompt( DESCRIPTOR_DATA *d )$/
c_affect_bit_name	chinese.c	/^char *c_affect_bit_name( long long int vector )$/
c_affect_loc_name	chinese.c	/^char *c_affect_loc_name( int location )$/
c_extra_bit_name	chinese.c	/^char *c_extra_bit_name( int extra_flags )$/
c_item_type_name	chinese.c	/^char *c_item_type_name( OBJ_DATA *obj )$/
call_out_update	update.c	/^void call_out_update()$/
can_carry_n	handler.c	/^int can_carry_n( CHAR_DATA *ch )$/
can_carry_w	handler.c	/^int can_carry_w( CHAR_DATA *ch )$/
can_drop_obj	handler.c	/^bool can_drop_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/
can_see	handler.c	/^bool can_see( CHAR_DATA *ch, CHAR_DATA *victim )$/
can_see_obj	handler.c	/^bool can_see_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/
capitalize	db.c	/^char *capitalize( const char *str )$/
change_exit	olc_act.c	/^bool change_exit( CHAR_DATA *ch, char *argument, i/
char_from_room	handler.c	/^void char_from_room( CHAR_DATA *ch )$/
char_from_room2	handler.c	/^void char_from_room2( CHAR_DATA *ch )$/
char_to_room	handler.c	/^void char_to_room( CHAR_DATA *ch, ROOM_INDEX_DATA /
char_update	update.c	/^void char_update( void )$/
chat_social	interp.c	/^bool chat_social( CHAR_DATA *ch, char *command, ch/
check_arrival	mob_prog.c	/^void check_arrival(CHAR_DATA *ch, bool f)$/
check_blind	act_info.c	/^bool check_blind( CHAR_DATA *ch )$/
check_block	fight.c	/^bool check_block( CHAR_DATA *ch, CHAR_DATA *victim/
check_clco	olc.c	/^bool check_clco( const struct flag_cost fc[], char/
check_container	act_obj.c	/^bool check_container( CHAR_DATA *ch, OBJ_DATA *con/
check_corpse_count	fight.c	/^void check_corpse_count( CHAR_DATA * ch, CHAR_DATA/
check_cost	olc.c	/^bool check_cost(CHAR_DATA *ch, int cost)$/
check_dodge	fight.c	/^bool check_dodge( CHAR_DATA *ch, CHAR_DATA *victim/
check_fire_container	magic.c	/^void check_fire_container( OBJ_DATA *con, CHAR_DAT/
check_killer	fight.c	/^void check_killer( CHAR_DATA *ch, CHAR_DATA *victi/
check_mob_ai	fight.c	/^CHAR_DATA * check_mob_ai( CHAR_DATA *ch)$/
check_parry	fight.c	/^bool check_parry( CHAR_DATA *ch, CHAR_DATA *victim/
check_parse_name	comm.c	/^bool check_parse_name( char *name )$/
check_playing	comm.c	/^bool check_playing( DESCRIPTOR_DATA *d, char *name/
check_qmark	mob_commands.c	/^bool check_qmark( CHAR_DATA *target, char *arg )$/
check_race_special	fight.c	/^bool check_race_special( CHAR_DATA *ch )$/
check_range	olc_act.c	/^bool check_range( int lower, int upper )$/
check_reconnect	comm.c	/^bool check_reconnect( DESCRIPTOR_DATA *d, char *na/
check_social	interp.c	/^bool check_social( CHAR_DATA *ch, char *command, c/
check_tactics	fight.c	/^bool check_tactics( CHAR_DATA *ch, CHAR_DATA *vict/
clan_members	clan.c	/^int clan_members( CLAN_DATA *pClan )$/
clan_social	clan.c	/^bool clan_social( CHAR_DATA *ch, char *command, ch/
clan_title	clan.c	/^void clan_title( CHAR_DATA *ch, char *title )$/
clan_update	clan.c	/^void clan_update( void )$/
clanact	clan.c	/^void clanact( const char *format, CHAR_DATA *ch, c/
class_lookup	act_info.c	/^int class_lookup( const char *name )$/
clear_char	db.c	/^void clear_char( CHAR_DATA *ch )$/
close_socket	comm.c	/^void close_socket( DESCRIPTOR_DATA *dclose )$/
close_socket2	comm.c	/^void close_socket2( DESCRIPTOR_DATA *dclose )$/
count_obj_index_vnum	handler.c	/^int count_obj_index_vnum( int vnum ) $/
count_obj_list	handler.c	/^int count_obj_list( OBJ_INDEX_DATA *pObjIndex, OBJ/
create_mobile	db.c	/^CHAR_DATA *create_mobile( MOB_INDEX_DATA *pMobInde/
create_money	handler.c	/^OBJ_DATA *create_money( int amount )$/
create_object	db.c	/^OBJ_DATA *create_object( OBJ_INDEX_DATA *pObjIndex/
damage	fight.c	/^void damage( CHAR_DATA *ch, CHAR_DATA *victim, int/
death_cry	fight.c	/^void death_cry( CHAR_DATA *ch )$/
defrag_heap	ssm.c	/^int defrag_heap()$/
del_qmark	mob_commands.c	/^void del_qmark( QMARK *qmark )$/
delayed_do_cast	magic.c	/^void delayed_do_cast( CHAR_DATA *ch, char *argumen/
delete	memwatch.c	/^void operator delete( void *p ) {$/
delete_mprog	olc_act.c	/^void delete_mprog( CHAR_DATA* ch, int pnum )$/
demote_level	update.c	/^void demote_level( CHAR_DATA *ch )$/
dice	db.c	/^int dice( int number, int size )$/
die_follower	act_comm.c	/^void die_follower( CHAR_DATA *ch, char *name )$/
display_resets	olc.c	/^void display_resets( CHAR_DATA *ch )$/
diw_fread_string	ssm.c	/^char *diw_fread_string( FILE *fp, int *status )$/
do_abstraction	magic.c	/^void do_abstraction( CHAR_DATA *ch, char *argument/
do_add_qmark	mob_commands.c	/^void do_add_qmark( CHAR_DATA *ch, char *argument )/
do_addexp	act_wiz.c	/^void do_addexp( CHAR_DATA *ch, char *argument )$/
do_adore	act_obj.c	/^void do_adore( CHAR_DATA *ch, char *argument )$/
do_advance	act_wiz.c	/^void do_advance( CHAR_DATA *ch, char *argument )$/
do_aedit	olc.c	/^void do_aedit( CHAR_DATA *ch, char *argument )$/
do_afk	act_info.c	/^void do_afk( CHAR_DATA *ch, char *argument )$/
do_alist	olc.c	/^void do_alist( CHAR_DATA *ch, char *argument )$/
do_allow	act_wiz.c	/^void do_allow( CHAR_DATA *ch, char *argument )$/
do_answer	act_comm.c	/^void do_answer( CHAR_DATA *ch, char *argument )$/
do_areas	db.c	/^void do_areas( CHAR_DATA *ch, char *argument )$/
do_asave	olc_save.c	/^void do_asave( CHAR_DATA *ch, char *argument )$/
do_ass	fight.c	/^void do_ass( CHAR_DATA *ch, char *argument )$/
do_at	act_wiz.c	/^void do_at( CHAR_DATA *ch, char *argument )$/
do_auction	act_comm.c	/^void do_auction( CHAR_DATA *ch, char *argument )$/
do_auto	act_info.c	/^void do_auto( CHAR_DATA *ch, char *argument )$/
do_autoexit	act_info.c	/^void do_autoexit ( CHAR_DATA *ch, char *argument )/
do_autoget	act_obj.c	/^int do_autoget( CHAR_DATA *ch, char *argument )$/
do_autogold	act_info.c	/^void do_autogold ( CHAR_DATA *ch, char *argument )/
do_autoloot	act_info.c	/^void do_autoloot ( CHAR_DATA *ch, char *argument )/
do_autopower	magic.c	/^bool do_autopower( CHAR_DATA *ch, char *argument )/
do_autosac	act_info.c	/^void do_autosac ( CHAR_DATA *ch, char *argument )$/
do_backup	save.c	/^void do_backup( CHAR_DATA *ch, char *argument )$/
do_bamfin	act_wiz.c	/^void do_bamfin( CHAR_DATA *ch, char *argument )$/
do_bamfout	act_wiz.c	/^void do_bamfout( CHAR_DATA *ch, char *argument )$/
do_ban	act_wiz.c	/^void do_ban( CHAR_DATA *ch, char *argument )$/
do_barehand	fight.c	/^void do_barehand( CHAR_DATA *ch, char *argument )$/
do_bashhead	fight.c	/^void do_bashhead( CHAR_DATA *ch, char *argument )$/
do_battle_array	act_comm.c	/^void do_battle_array( CHAR_DATA *ch, char *argumen/
do_beep	act_comm.c	/^void do_beep( CHAR_DATA *ch, char *argument )$/
do_berserk	fight.c	/^void do_berserk( CHAR_DATA *ch, char *argument )$/
do_bet	act_comm.c	/^void do_bet( CHAR_DATA *ch, char *argument )$/
do_blank	act_info.c	/^void do_blank ( CHAR_DATA *ch, char *argument )$/
do_brandish	act_obj.c	/^void do_brandish( CHAR_DATA *ch, char *argument )$/
do_brief	act_info.c	/^void do_brief ( CHAR_DATA *ch, char *argument )$/
do_bug	act_comm.c	/^void do_bug( CHAR_DATA *ch, char *argument )$/
do_buy	act_obj.c	/^void do_buy( CHAR_DATA *ch, char *argument )$/
do_cast	magic.c	/^void do_cast( CHAR_DATA *ch, char *argument )$/
do_change	fight.c	/^void do_change( CHAR_DATA *ch, char *argument )$/
do_channels	act_info.c	/^void do_channels( CHAR_DATA *ch, char *argument )$/
do_charge	fight.c	/^void do_charge( CHAR_DATA *ch, char *argument )\/*/
do_chat	act_comm.c	/^void do_chat( CHAR_DATA *ch, char *argument )$/
do_chatemote	interp.c	/^void do_chatemote(CHAR_DATA *ch, char *argument)$/
do_circular	fight.c	/^void do_circular( CHAR_DATA *ch, char *argument )/
do_clan	clan.c	/^void do_clan( CHAR_DATA *ch, char *argument )$/
do_clanchat	clan.c	/^void do_clanchat( CHAR_DATA *ch, char *argument )$/
do_clanchatemote	clan.c	/^void do_clanchatemote( CHAR_DATA *ch, char *argume/
do_close	act_move.c	/^void do_close( CHAR_DATA *ch, char *argument )$/
do_cname	act_info.c	/^void do_cname( CHAR_DATA *ch, char *argument )$/
do_combat_howl	fight.c	/^void do_combat_howl( CHAR_DATA *ch, char *argument/
do_combine	act_info.c	/^void do_combine ( CHAR_DATA *ch, char *argument )$/
do_commands	act_info.c	/^void do_commands( CHAR_DATA *ch, char *argument )$/
do_compare	act_info.c	/^void do_compare( CHAR_DATA *ch, char *argument )$/
do_config	act_info.c	/^void do_config( CHAR_DATA *ch, char *argument )$/
do_consider	act_info.c	/^void do_consider( CHAR_DATA *ch, char *argument )$/
do_cras	act_wiz.c	/^void do_cras( CHAR_DATA *ch, char *argument )$/
do_crash	act_wiz.c	/^void do_crash( CHAR_DATA *ch, char *argument )$/
do_credits	act_info.c	/^void do_credits( CHAR_DATA *ch, char *argument )$/
do_darkraid	fight.c	/^void do_darkraid( CHAR_DATA *ch, char *argument )/
do_del_qmark	mob_commands.c	/^void do_del_qmark( CHAR_DATA *ch, char *argument )/
do_deny	act_wiz.c	/^void do_deny( CHAR_DATA *ch, char *argument )$/
do_deposit	act_obj.c	/^void do_deposit( CHAR_DATA *ch, char *argument )$/
do_description	act_info.c	/^void do_description( CHAR_DATA *ch, char *argument/
do_dice	act_comm.c	/^void do_dice( CHAR_DATA *ch, char *argument )$/
do_disarm	fight.c	/^void do_disarm( CHAR_DATA *ch, char *argument )$/
do_disconnect	act_wiz.c	/^void do_disconnect( CHAR_DATA *ch, char *argument /
do_donate	act_obj.c	/^void do_donate( CHAR_DATA *ch, char *arg )$/
do_down	act_move.c	/^void do_down( CHAR_DATA *ch, char *argument )$/
do_drink	act_obj.c	/^void do_drink( CHAR_DATA *ch, char *argument )$/
do_drop	act_obj.c	/^void do_drop( CHAR_DATA *ch, char *argument )$/
do_earth	fight.c	/^void do_earth( CHAR_DATA *ch, char *argument )\/*{/
do_east	act_move.c	/^void do_east( CHAR_DATA *ch, char *argument )$/
do_eat	act_obj.c	/^void do_eat( CHAR_DATA *ch, char *argument )$/
do_echo	act_wiz.c	/^void do_echo( CHAR_DATA *ch, char *argument )$/
do_emote	act_comm.c	/^void do_emote( CHAR_DATA *ch, char *argument )$/
do_empslash	fight.c	/^void do_empslash( CHAR_DATA * ch, CHAR_DATA* victi/
do_eqbank	act_obj.c	/^void do_eqbank( CHAR_DATA *ch, char *argument )$/
do_equipment	act_info.c	/^void do_equipment( CHAR_DATA *ch, char *argument )/
do_examine	act_info.c	/^void do_examine( CHAR_DATA *ch, char *argument )$/
do_exits	act_info.c	/^void do_exits( CHAR_DATA *ch, char *argument )$/
do_fee	fight.c	/^void do_fee( CHAR_DATA *ch, char *argument )$/
do_feed	fight.c	/^void do_feed( CHAR_DATA *ch, char *argument )$/
do_fill	act_obj.c	/^void do_fill( CHAR_DATA *ch, char *argument )$/
do_flaming	fight.c	/^void do_flaming( CHAR_DATA *ch, char *argument )\//
do_flee	fight.c	/^void do_flee( CHAR_DATA *ch, char *argument )$/
do_follow	act_comm.c	/^void do_follow( CHAR_DATA *ch, char *argument )$/
do_force	act_wiz.c	/^void do_force( CHAR_DATA *ch, char *argument )$/
do_forcer	act_wiz.c	/^void do_forcer( CHAR_DATA *ch, char *argument )$/
do_freeze	act_wiz.c	/^void do_freeze( CHAR_DATA *ch, char *argument )$/
do_frenzy	fight.c	/^void do_frenzy( CHAR_DATA *ch, char *argument )$/
do_get	act_obj.c	/^void do_get( CHAR_DATA *ch, char *argument )$/
do_get_silence	act_obj.c	/^void do_get_silence( CHAR_DATA *ch, char *argument/
do_give	act_obj.c	/^void do_give( CHAR_DATA *ch, char *argument )$/
do_goto	act_wiz.c	/^void do_goto( CHAR_DATA *ch, char *argument )$/
do_group	act_comm.c	/^void do_group( CHAR_DATA *ch, char *argument )$/
do_gtell	act_comm.c	/^void do_gtell( CHAR_DATA *ch, char *argument )$/
do_help	act_info.c	/^void do_help( CHAR_DATA *ch, char *argument )$/
do_herotalk	act_comm.c	/^void do_herotalk( CHAR_DATA *ch, char *argument )$/
do_hname	act_info.c	/^void do_hname( CHAR_DATA *ch, char *argument )$/
do_holylight	act_wiz.c	/^void do_holylight( CHAR_DATA *ch, char *argument )/
do_horse_backup	save.c	/^void do_horse_backup( CHAR_DATA *ch, char *argumen/
do_hunt	fight.c	/^void do_hunt( CHAR_DATA *ch, char *argument )$/
do_idea	act_comm.c	/^void do_idea( CHAR_DATA *ch, char *argument )$/
do_immtalk	act_comm.c	/^void do_immtalk( CHAR_DATA *ch, char *argument )$/
do_immtalkemote	interp.c	/^void do_immtalkemote( CHAR_DATA *ch, char *argume/
do_imtlset	act_wiz.c	/^void do_imtlset( CHAR_DATA *ch, char *argument )$/
do_inventory	act_info.c	/^void do_inventory( CHAR_DATA *ch, char *argument )/
do_invis	act_wiz.c	/^void do_invis( CHAR_DATA *ch, char *argument )$/
do_invoke	fight.c	/^void do_invoke( CHAR_DATA *ch, char *argument )\/*/
do_join	act_info.c	/^void do_join( CHAR_DATA *ch, char *argument )$/
do_kick	fight.c	/^void do_kick( CHAR_DATA *ch, char *argument )$/
do_lead	act_comm.c	/^void do_lead( CHAR_DATA *ch, char *argument )$/
do_list	act_obj.c	/^void do_list( CHAR_DATA *ch, char *argument )$/
do_lock	act_move.c	/^void do_lock( CHAR_DATA *ch, char *argument )$/
do_log	act_wiz.c	/^void do_log( CHAR_DATA *ch, char *argument )$/
do_look	act_info.c	/^void do_look( CHAR_DATA *ch, char *argument )$/
do_mastat	mob_commands.c	/^void do_mastat( CHAR_DATA *ch, char *argument )$/
do_medit	olc.c	/^void do_medit( CHAR_DATA *ch, char *argument )$/
do_meditate	act_move.c	/^void do_meditate( CHAR_DATA *ch, char *argument )$/
do_memory	db.c	/^void do_memory( CHAR_DATA *ch, char *argument )$/
do_meteoric_arrow	fight.c	/^void do_meteoric_arrow( CHAR_DATA *ch, char *argum/
do_mfind	act_wiz.c	/^void do_mfind( CHAR_DATA *ch, char *argument )$/
do_mload	act_wiz.c	/^void do_mload( CHAR_DATA *ch, char *argument )$/
do_morphing	fight.c	/^void do_morphing(CHAR_DATA *ch, char* argument)$/
do_mpadd_qmark	mob_commands.c	/^void do_mpadd_qmark( CHAR_DATA *ch, char *argument/
do_mpasound	mob_commands.c	/^void do_mpasound( CHAR_DATA *ch, char *argument )$/
do_mpat	mob_commands.c	/^void do_mpat( CHAR_DATA *ch, char *argument )$/
do_mpcall	mob_commands.c	/^void do_mpcall( CHAR_DATA *ch, char *argument )$/
do_mpcallout	mob_commands.c	/^void do_mpcallout( CHAR_DATA *ch, char *argument )/
do_mpdef_rembch	mob_commands.c	/^void do_mpdef_rembch( CHAR_DATA *ch, char *argumen/
do_mpdel_qmark	mob_commands.c	/^void do_mpdel_qmark( CHAR_DATA *ch, char *argument/
do_mpdis_magic	mob_commands.c	/^void do_mpdis_magic( CHAR_DATA *ch, char *argument/
do_mpecho	mob_commands.c	/^void do_mpecho( CHAR_DATA *ch, char *argument )$/
do_mpechoaround	mob_commands.c	/^void do_mpechoaround( CHAR_DATA *ch, char *argumen/
do_mpechoat	mob_commands.c	/^void do_mpechoat( CHAR_DATA *ch, char *argument )$/
do_mpechotoall	mob_commands.c	/^void do_mpechotoall( CHAR_DATA *ch, char *argument/
do_mpedit	olc.c	/^void do_mpedit( CHAR_DATA *ch, char *argument )$/
do_mpforce	mob_commands.c	/^void do_mpforce( CHAR_DATA *ch, char *argument )$/
do_mpgoto	mob_commands.c	/^void do_mpgoto( CHAR_DATA *ch, char *argument )$/
do_mpgreward	mob_commands.c	/^void do_mpgreward( CHAR_DATA *ch, char *argument )/
do_mpgroup	mob_commands.c	/^void do_mpgroup( CHAR_DATA *ch, char *argument )$/
do_mpjunk	mob_commands.c	/^void do_mpjunk( CHAR_DATA *ch, char *argument )$/
do_mpkill	mob_commands.c	/^void do_mpkill( CHAR_DATA *ch, char *argument )$/
do_mplog	mob_commands.c	/^void do_mplog( CHAR_DATA *ch, char *argument )$/
do_mpmload	mob_commands.c	/^void do_mpmload( CHAR_DATA *ch, char *argument )$/
do_mpnowait	mob_commands.c	/^void do_mpnowait( CHAR_DATA *ch, char *argument )$/
do_mpoload	mob_commands.c	/^void do_mpoload( CHAR_DATA *ch, char *argument )$/
do_mppurge	mob_commands.c	/^void do_mppurge( CHAR_DATA *ch, char *argument )$/
do_mpstat	mob_commands.c	/^void do_mpstat( CHAR_DATA *ch, char *argument )$/
do_mptransfer	mob_commands.c	/^void do_mptransfer( CHAR_DATA *ch, char *argument /
do_mset	act_wiz.c	/^void do_mset( CHAR_DATA *ch, char *argument )$/
do_mstat	act_wiz.c	/^void do_mstat( CHAR_DATA *ch, char *argument )$/
do_mtlist	act_wiz.c	/^void do_mtlist( CHAR_DATA *ch, char *argument )$/
do_mtset	act_wiz.c	/^void do_mtset( CHAR_DATA *ch, char *argument )$/
do_mtstat	act_wiz.c	/^void do_mtstat( CHAR_DATA *ch, char *argument )$/
do_music	act_comm.c	/^void do_music( CHAR_DATA *ch, char *argument )$/
do_mwhere	act_wiz.c	/^void do_mwhere( CHAR_DATA *ch, char *argument )$/
do_newloc	act_wiz.c	/^void do_newloc( CHAR_DATA *ch, char *argument )$/
do_newlock	act_wiz.c	/^void do_newlock( CHAR_DATA *ch, char *argument )$/
do_noemote	act_wiz.c	/^void do_noemote( CHAR_DATA *ch, char *argument )$/
do_north	act_move.c	/^void do_north( CHAR_DATA *ch, char *argument )$/
do_note	act_comm.c	/^void do_note( CHAR_DATA *ch, char *argument )$/
do_notell	act_wiz.c	/^void do_notell( CHAR_DATA *ch, char *argument )$/
do_numloc	act_wiz.c	/^void do_numloc( CHAR_DATA *ch, char *argument )$/
do_numlock	act_wiz.c	/^void do_numlock( CHAR_DATA *ch, char *argument )  /
do_oedit	olc.c	/^void do_oedit( CHAR_DATA *ch, char *argument )$/
do_ofind	act_wiz.c	/^void do_ofind( CHAR_DATA *ch, char *argument )$/
do_oload	act_wiz.c	/^void do_oload( CHAR_DATA *ch, char *argument )$/
do_open	act_move.c	/^void do_open( CHAR_DATA *ch, char *argument )$/
do_order	act_comm.c	/^void do_order( CHAR_DATA *ch, char *argument )$/
do_oset	act_wiz.c	/^void do_oset( CHAR_DATA *ch, char *argument )$/
do_ostat	ssm.c	/^void do_ostat( CHAR_DATA *ch, char *argument )$/
do_owhere	act_wiz.c	/^void do_owhere( CHAR_DATA *ch, char *argument )$/
do_pagelen	act_info.c	/^void do_pagelen ( CHAR_DATA *ch, char *argument )$/
do_pardon	act_wiz.c	/^void do_pardon( CHAR_DATA *ch, char *argument )$/
do_password	act_info.c	/^void do_password( CHAR_DATA *ch, char *argument )$/
do_peace	act_wiz.c	/^void do_peace( CHAR_DATA *ch, char *argument )$/
do_perform	fight.c	/^void do_perform( CHAR_DATA *ch, char *argument )$/
do_pick	act_move.c	/^void do_pick( CHAR_DATA *ch, char *argument )$/
do_poison_weapon	act_obj.c	/^void do_poison_weapon( CHAR_DATA *ch, char *argume/
do_pose	act_comm.c	/^void do_pose( CHAR_DATA *ch, char *argument )$/
do_power	magic.c	/^void do_power( CHAR_DATA *ch, char *argument )$/
do_practice	act_info.c	/^void do_practice( CHAR_DATA *ch, char *argument )$/
do_prompt	act_info.c	/^void do_prompt( CHAR_DATA *ch, char *argument )$/
do_protect	fight.c	/^void do_protect( CHAR_DATA *ch, char *argument )\//
do_purge	act_wiz.c	/^void do_purge( CHAR_DATA *ch, char *argument )$/
do_put	act_obj.c	/^void do_put( CHAR_DATA *ch, char *argument )$/
do_quaff	act_obj.c	/^void do_quaff( CHAR_DATA *ch, char *argument )$/
do_question	act_comm.c	/^void do_question( CHAR_DATA *ch, char *argument )$/
do_qui	act_comm.c	/^void do_qui( CHAR_DATA *ch, char *argument )$/
do_quit	act_comm.c	/^void do_quit( CHAR_DATA *ch, char *argument )$/
do_reboo	act_wiz.c	/^void do_reboo( CHAR_DATA *ch, char *argument )$/
do_reboot	act_wiz.c	/^void do_reboot( CHAR_DATA *ch, char *argument )$/
do_receive	act_obj.c	/^void do_receive( CHAR_DATA *ch, char *argument )$/
do_recho	act_wiz.c	/^void do_recho( CHAR_DATA *ch, char *argument )$/
do_recite	act_obj.c	/^void do_recite( CHAR_DATA *ch, char *argument )$/
do_redit	olc.c	/^void do_redit( CHAR_DATA *ch, char *argument )$/
do_register	act_obj.c	/^void do_register( CHAR_DATA *ch, char *arg )$/
do_remove	act_obj.c	/^void do_remove( CHAR_DATA *ch, char *argument )$/
do_rent	act_comm.c	/^void do_rent( CHAR_DATA *ch, char *argument )$/
do_repair	act_obj.c	/^void do_repair( CHAR_DATA *ch, char *argument )$/
do_reply	act_comm.c	/^void do_reply( CHAR_DATA *ch, char *argument )$/
do_report	act_info.c	/^void do_report( CHAR_DATA *ch, char *argument )$/
do_rescue	fight.c	/^void do_rescue( CHAR_DATA *ch, char *argument )$/
do_resets	olc.c	/^void do_resets( CHAR_DATA *ch, char *argument )$/
do_rest	act_move.c	/^void do_rest( CHAR_DATA *ch, char *argument )$/
do_restore	act_wiz.c	/^void do_restore( CHAR_DATA *ch, char *argument )$/
do_return	act_wiz.c	/^void do_return( CHAR_DATA *ch, char *argument )$/
do_rpstat	mob_commands.c	/^void do_rpstat( CHAR_DATA *ch, char *argument )$/
do_rset	act_wiz.c	/^void do_rset( CHAR_DATA *ch, char *argument )$/
do_rstat	act_wiz.c	/^void do_rstat( CHAR_DATA *ch, char *argument )$/
do_rumor	act_comm.c	/^void do_rumor( CHAR_DATA *ch, char *argument )$/
do_sacrifice	act_obj.c	/^void do_sacrifice( CHAR_DATA *ch, char *argument )/
do_save	act_comm.c	/^void do_save( CHAR_DATA *ch, char *argument )$/
do_say	act_comm.c	/^void do_say( CHAR_DATA *ch, char *argument )$/
do_scan	act_info.c	/^void do_scan( CHAR_DATA *ch, char *argument )$/
do_score	act_info.c	/^void do_score( CHAR_DATA *ch, char *argument )$/
do_sell	act_obj.c	/^void do_sell( CHAR_DATA *ch, char *argument )$/
do_shout	act_comm.c	/^void do_shout( CHAR_DATA *ch, char *argument )$/
do_shutdow	act_wiz.c	/^void do_shutdow( CHAR_DATA *ch, char *argument )$/
do_shutdown	act_wiz.c	/^void do_shutdown( CHAR_DATA *ch, char *argument )$/
do_silence	act_wiz.c	/^void do_silence( CHAR_DATA *ch, char *argument )$/
do_silentsave	act_comm.c	/^void do_silentsave( CHAR_DATA *ch, char *argument /
do_skilldrv	mob_commands.c	/^void do_skilldrv( CHAR_DATA *ch, char *argument )$/
do_sla	fight.c	/^void do_sla( CHAR_DATA *ch, char *argument )$/
do_slay	fight.c	/^void do_slay( CHAR_DATA *ch, char *argument )$/
do_slist	act_info.c	/^void do_slist ( CHAR_DATA *ch, char *argument )$/
do_slookup	act_wiz.c	/^void do_slookup( CHAR_DATA *ch, char *argument )$/
do_snoop	act_wiz.c	/^void do_snoop( CHAR_DATA *ch, char *argument )$/
do_socials	act_info.c	/^void do_socials( CHAR_DATA *ch, char *argument )$/
do_south	act_move.c	/^void do_south( CHAR_DATA *ch, char *argument )$/
do_spells	act_info.c	/^void do_spells ( CHAR_DATA *ch, char *argument )$/
do_split	act_comm.c	/^void do_split( CHAR_DATA *ch, char *argument )$/
do_sset	act_wiz.c	/^void do_sset( CHAR_DATA *ch, char *argument )$/
do_sstime	act_wiz.c	/^void do_sstime( CHAR_DATA *ch, char *argument )$/
do_stake	fight.c	/^void do_stake( CHAR_DATA *ch, char *argument )$/
do_stand	act_move.c	/^void do_stand( CHAR_DATA *ch, char *argument )$/
do_stare	fight.c	/^void do_stare( CHAR_DATA *ch, char *argument )\/*{/
do_steal	act_obj.c	/^void do_steal( CHAR_DATA *ch, char *argument )$/
do_store	act_obj.c	/^void do_store( CHAR_DATA *ch, char *argument )$/
do_suicid	act_comm.c	/^void do_suicid( CHAR_DATA *ch, char *argument )$/
do_suicide	act_comm.c	/^void do_suicide( CHAR_DATA *ch, char *argument )$/
do_switch	act_wiz.c	/^void do_switch( CHAR_DATA *ch, char *argument )$/
do_talk	act_comm.c	/^void do_talk( CHAR_DATA *ch, char *argument )$/
do_tell	act_comm.c	/^void do_tell( CHAR_DATA *ch, char *argument )$/
do_time	act_info.c	/^void do_time( CHAR_DATA *ch, char *argument )$/
do_title	act_info.c	/^void do_title( CHAR_DATA *ch, char *argument )$/
do_top10	act_info.c	/^void do_top10( CHAR_DATA *ch, char *argument )$/
do_track	fight.c	/^void do_track( CHAR_DATA *ch, char *argument )\/*{/
do_transfer	act_wiz.c	/^void do_transfer( CHAR_DATA *ch, char *argument )$/
do_trust	act_wiz.c	/^void do_trust( CHAR_DATA *ch, char *argument )$/
do_twin	fight.c	/^void do_twin( CHAR_DATA *ch, char *argument )\/*{{/
do_typo	act_comm.c	/^void do_typo( CHAR_DATA *ch, char *argument )$/
do_unbackup	act_wiz.c	/^void do_unbackup( CHAR_DATA *ch, char *argument )$/
do_unlock	act_move.c	/^void do_unlock( CHAR_DATA *ch, char *argument )$/
do_up	act_move.c	/^void do_up( CHAR_DATA *ch, char *argument )$/
do_users	act_wiz.c	/^void do_users( CHAR_DATA *ch, char *argument )$/
do_value	act_obj.c	/^void do_value( CHAR_DATA *ch, char *argument )$/
do_wear	act_obj.c	/^void do_wear( CHAR_DATA *ch, char *argument )$/
do_weather	act_info.c	/^void do_weather( CHAR_DATA *ch, char *argument )$/
do_west	act_move.c	/^void do_west( CHAR_DATA *ch, char *argument )$/
do_where	act_info.c	/^void do_where( CHAR_DATA *ch, char *argument )$/
do_who	act_info.c	/^void do_who( CHAR_DATA *ch, char *argument )$/
do_whois	act_info.c	/^void do_whois( CHAR_DATA *ch, char *argument )$/
do_wimpy	act_info.c	/^void do_wimpy( CHAR_DATA *ch, char *argument )$/
do_withdraw	act_obj.c	/^void do_withdraw( CHAR_DATA *ch, char *argument )$/
do_wizhelp	act_wiz.c	/^void do_wizhelp( CHAR_DATA *ch, char *argument )$/
do_wizify	act_wiz.c	/^void do_wizify( CHAR_DATA *ch, char *argument )$/
do_wizlist	act_info.c	/^void do_wizlist ( CHAR_DATA *ch, char *argument )$/
do_wizlock	act_wiz.c	/^void do_wizlock( CHAR_DATA *ch, char *argument )$/
do_yell	act_comm.c	/^void do_yell( CHAR_DATA *ch, char *argument )$/
do_zap	act_obj.c	/^void do_zap( CHAR_DATA *ch, char *argument )$/
dragon	special.c	/^bool dragon( CHAR_DATA *ch, char *spell_name )$/
edit_done	olc.c	/^bool edit_done( CHAR_DATA *ch )$/
edit_mprog	olc_act.c	/^MPROG_DATA* edit_mprog( CHAR_DATA* ch, MOB_INDEX_D/
end_of_game	handler.c	/^void end_of_game( void )$/
eqb_do_examine	act_obj.c	/^void eqb_do_examine( CHAR_DATA *ch, OBJ_DATA *obj /
eqb_do_look	act_obj.c	/^void eqb_do_look( CHAR_DATA *ch, OBJ_DATA *obj )$/
equip_char	handler.c	/^void equip_char( CHAR_DATA *ch, OBJ_DATA *obj, int/
extra_bit_name	handler.c	/^char *extra_bit_name( int extra_flags )$/
extract_bank_obj	handler.c	/^void extract_bank_obj( OBJ_DATA *obj )$/
extract_char	handler.c	/^void extract_char( CHAR_DATA *ch, bool fPull )$/
extract_if_endif	mob_prog.c	/^char * extract_if_endif( char *com_list, CHAR_DATA/
extract_obj	handler.c	/^void extract_obj( OBJ_DATA *obj )$/
fighting_by	fight.c	/^CHAR_DATA * fighting_by( CHAR_DATA *ch, CHAR_DATA /
find_door	act_move.c	/^int find_door( CHAR_DATA *ch, char *arg )$/
find_keeper	act_obj.c	/^CHAR_DATA *find_keeper( CHAR_DATA *ch, char *argum/
find_location	act_wiz.c	/^ROOM_INDEX_DATA *find_location( CHAR_DATA *ch, cha/
firewall_update	update.c	/^void firewall_update(R_AFFECT_DATA *paf)$/
first_arg	string.c	/^char *first_arg( char *argument, char *arg_first, /
fix_exits	db.c	/^void fix_exits( void )$/
fix_string	olc_save.c	/^char *fix_string( const char *str )$/
flag_class	olc.c	/^int flag_class( const struct flag_cost fc[], char*/
flag_cost	olc.c	/^int flag_cost( const struct flag_cost fc[], char* /
flag_lookup	bit.c	/^long long int flag_lookup(const char *name, const /
flag_string	bit.c	/^char *flag_string( const struct flag_type *flag_ta/
flag_value	bit.c	/^long long int flag_value( const struct flag_type */
format_obj_to_char	act_info.c	/^char *format_obj_to_char( OBJ_DATA *obj, CHAR_DATA/
format_obj_to_char_b	act_info.c	/^char *format_obj_to_char_b( OBJ_DATA *obj, CHAR_DA/
format_string	string.c	/^char *format_string( char *oldstring \/*, bool fSp/
fread_alpha_word	db.c	/^char *fread_alpha_word( FILE *fp, int *status )$/
fread_bank_obj	save.c	/^int fread_bank_obj( CHAR_DATA *ch, FILE *fp )$/
fread_char	save.c	/^int fread_char( CHAR_DATA *ch, FILE *fp )$/
fread_clan	clan.c	/^bool fread_clan( CLAN_DATA *pClan, FILE *fp)$/
fread_letter	db.c	/^char fread_letter( FILE *fp )$/
fread_newbank_obj	save.c	/^int fread_newbank_obj( BANK_DATA *ch, FILE *fp )$/
fread_neweqbank	act_obj.c	/^int fread_neweqbank( BANK_DATA * ch, FILE* fp){$/
fread_number	db.c	/^long long int fread_number( FILE *fp, int *status /
fread_obj	save.c	/^int fread_obj( CHAR_DATA *ch, FILE *fp )$/
fread_string	ssm.c	/^char *fread_string( FILE *fp, int *status )$/
fread_to_eol	db.c	/^void fread_to_eol( FILE *fp )$/
fread_word	db.c	/^char *fread_word( FILE *fp, int *status )$/
free_affect	mem.c	/^void free_affect( AFFECT_DATA* pAf )$/
free_area	mem.c	/^void free_area( AREA_DATA *pArea )$/
free_auction_data	mem.c	/^void free_auction_data ( AUC_DATA *pAuc)$/
free_call_out	handler.c	/^void free_call_out( CALL_OUT_DATA *rm)$/
free_char	db.c	/^void free_char( CHAR_DATA *ch )$/
free_clan_data	clan.c	/^void free_clan_data( CLAN_DATA * pClan )$/
free_exit	mem.c	/^void free_exit( EXIT_DATA *pExit )$/
free_extra_descr	mem.c	/^void free_extra_descr( EXTRA_DESCR_DATA *pExtra )$/
free_mem	memory.c	/^void free_mem( void *pMem)$/
free_mob_index	mem.c	/^void free_mob_index( MOB_INDEX_DATA *pMob )$/
free_neweqbank	act_obj.c	/^void free_neweqbank( BANK_DATA * bank )$/
free_obj_index	mem.c	/^void free_obj_index( OBJ_INDEX_DATA *pObj )$/
free_r_affect	mem.c	/^void free_r_affect( R_AFFECT_DATA* pAf )$/
free_rcall_out	handler.c	/^void free_rcall_out( RCALL_OUT_DATA *rm)$/
free_reset_data	mem.c	/^void free_reset_data( RESET_DATA *pReset )$/
free_room_index	mem.c	/^void free_room_index( ROOM_INDEX_DATA *pRoom )$/
free_shop	mem.c	/^void free_shop( SHOP_DATA *pShop )$/
free_string	ssm.c	/^void free_string( char *str )$/
frenzy_check_dodge	fight.c	/^bool frenzy_check_dodge( CHAR_DATA *ch, CHAR_DATA /
fwrite_bank_obj	save.c	/^void fwrite_bank_obj( CHAR_DATA *ch, OBJ_DATA *obj/
fwrite_char	save.c	/^void fwrite_char( CHAR_DATA *ch, FILE *fp )$/
fwrite_newbank_obj	save.c	/^void fwrite_newbank_obj( CHAR_DATA *ch, OBJ_DATA */
fwrite_neweqbank	act_obj.c	/^void fwrite_neweqbank( CHAR_DATA * ch, FILE* fp )$/
fwrite_obj	save.c	/^void fwrite_obj( CHAR_DATA *ch, OBJ_DATA *obj, FIL/
gain_condition	update.c	/^void gain_condition( CHAR_DATA *ch, int iCond, int/
gain_exp	update.c	/^void gain_exp( CHAR_DATA *ch, int gain )$/
game_loop_mac_msdos	comm.c	/^void game_loop_mac_msdos( void )$/
game_loop_unix	comm.c	/^void game_loop_unix( int control )$/
get_age	handler.c	/^int get_age( CHAR_DATA *ch )$/
get_area_data	olc.c	/^AREA_DATA *get_area_data( int vnum )$/
get_char	handler.c	/^CHAR_DATA *get_char( CHAR_DATA *ch )$/
get_char_room	handler.c	/^CHAR_DATA *get_char_room( CHAR_DATA *ch, char *arg/
get_char_world	handler.c	/^CHAR_DATA *get_char_world( CHAR_DATA *ch, char *ar/
get_cost	act_obj.c	/^int get_cost( CHAR_DATA *keeper, OBJ_DATA *obj, bo/
get_curr_con	handler.c	/^int get_curr_con( CHAR_DATA *ch )$/
get_curr_dex	handler.c	/^int get_curr_dex( CHAR_DATA *ch )$/
get_curr_dura	handler.c	/^int get_curr_dura( OBJ_DATA * obj )$/
get_curr_int	handler.c	/^int get_curr_int( CHAR_DATA *ch )$/
get_curr_str	handler.c	/^int get_curr_str( CHAR_DATA *ch )$/
get_curr_wis	handler.c	/^int get_curr_wis( CHAR_DATA *ch )$/
get_damroll	handler.c	/^int get_damroll( CHAR_DATA *ch, int wpn )$/
get_eq_char	handler.c	/^OBJ_DATA *get_eq_char( CHAR_DATA *ch, int iWear )$/
get_extra_descr	db.c	/^char *get_extra_descr( const char *name, EXTRA_DES/
get_hitroll	handler.c	/^int get_hitroll( CHAR_DATA *ch, int wpn )$/
get_max_dura	handler.c	/^int get_max_dura(OBJ_DATA *obj)$/
get_mob_index	db.c	/^MOB_INDEX_DATA *get_mob_index( int vnum )$/
get_obj	act_obj.c	/^void get_obj( CHAR_DATA *ch, OBJ_DATA *obj, OBJ_DA/
get_obj_carry	handler.c	/^OBJ_DATA *get_obj_carry( CHAR_DATA *ch, char *argu/
get_obj_here	handler.c	/^OBJ_DATA *get_obj_here( CHAR_DATA *ch, char *argum/
get_obj_index	db.c	/^OBJ_INDEX_DATA *get_obj_index( int vnum )$/
get_obj_index_vnum	handler.c	/^OBJ_DATA *get_obj_index_vnum( int vnum ) $/
get_obj_list	handler.c	/^OBJ_DATA *get_obj_list( CHAR_DATA *ch, char *argum/
get_obj_number	handler.c	/^int get_obj_number( OBJ_DATA *obj )$/
get_obj_type	handler.c	/^OBJ_DATA *get_obj_type( OBJ_INDEX_DATA *pObjIndex /
get_obj_wear	handler.c	/^OBJ_DATA *get_obj_wear( CHAR_DATA *ch, char *argum/
get_obj_weight	handler.c	/^int get_obj_weight( OBJ_DATA *obj )$/
get_obj_world	handler.c	/^OBJ_DATA *get_obj_world( CHAR_DATA *ch, char *argu/
get_pfxextra_descr	db.c	/^char *get_pfxextra_descr( const char *name, EXTRA_/
get_powergem_carry	magic.c	/^OBJ_DATA *get_powergem_carry( CHAR_DATA *ch, char /
get_room_index	db.c	/^ROOM_INDEX_DATA *get_room_index( int vnum )$/
get_trust	handler.c	/^int get_trust( CHAR_DATA *ch )$/
get_vnum_area	olc_act.c	/^AREA_DATA *get_vnum_area( int vnum )$/
get_vrace_drp	handler.c	/^int get_vrace_drp ( CHAR_DATA * victim, OBJ_DATA */
get_vrace_drq	handler.c	/^int get_vrace_drq ( CHAR_DATA * victim, OBJ_DATA */
get_vrace_hrp	handler.c	/^int get_vrace_hrp ( CHAR_DATA * victim, OBJ_DATA */
get_vrace_hrq	handler.c	/^int get_vrace_hrq ( CHAR_DATA * victim, OBJ_DATA */
gettimeofday	comm.c	/^int gettimeofday( struct timeval *tp, void *tzp )$/
gift_color	act_info.c	/^char* gift_color(int cur, int ori)$/
gr_stat_color	act_comm.c	/^char* gr_stat_color(int cur, int max)$/
group_gain	fight.c	/^void group_gain( CHAR_DATA *ch, CHAR_DATA *victim /
has_key	act_move.c	/^bool has_key( CHAR_DATA *ch, int key )$/
has_player	handler.c	/^bool has_player(char* arg2)$/
hit_gain	update.c	/^int hit_gain( CHAR_DATA *ch )$/
indestructible	handler.c	/^bool indestructible( OBJ_DATA *obj )$/
init_mm	db.c	/^void init_mm( )$/
init_socket	comm.c	/^int init_socket( u_short port )$/
init_string_space	ssm.c	/^void init_string_space()$/
initial	save.c	/^char *initial( const char *str )$/
interpolate	db.c	/^int interpolate( int level, int value_00, int valu/
interpolate1	db.c	/^int interpolate1( int level1, int value1, int leve/
interpret	interp.c	/^void interpret( CHAR_DATA *ch, char *argument )$/
immact interp.c	/^void immact( const char *format, CHAR_DATA *ch, cons/
immtalk_social	interp.c	/^bool immtalk_social( CHAR_DATA *ch, char *command, ch/
is_affected	affect.c	/^bool is_affected( CHAR_DATA *ch, int sn )$/
is_broken	handler.c	/^bool is_broken( OBJ_DATA *obj )$/
is_chinese	chinese.c	/^bool is_chinese(CHAR_DATA* ch, CHAR_DATA* victim)$/
is_flying	handler.c	/^bool is_flying( CHAR_DATA * victim) $/
is_name	handler.c	/^bool is_name( const char *str, char *namelist )$/
is_note_to	act_comm.c	/^bool is_note_to( CHAR_DATA *ch, NOTE_DATA *pnote )/
is_number	interp.c	/^bool is_number( char *arg )$/
is_pfxname	handler.c	/^bool is_pfxname( const char *str, char *namelist )/
is_prefix_qmark	handler.c	/^QMARK * is_prefix_qmark( CHAR_DATA *ch, char* q)$/
is_qmark	handler.c	/^QMARK * is_qmark( CHAR_DATA *ch, char* q)$/
is_safe	fight.c	/^bool is_safe( CHAR_DATA *ch, CHAR_DATA *victim )$/
is_same_group	act_comm.c	/^bool is_same_group( CHAR_DATA *ach, CHAR_DATA *bch/
is_skname	act_info.c	/^int is_skname( const char *str, char *namelist )$/
is_stat	bit.c	/^bool is_stat( const struct flag_type *flag_table )/
is_wielding_poisoned	fight.c	/^bool is_wielding_poisoned( CHAR_DATA *ch, int wpn /
isascii	comm.c	/^#define	       isascii( c )		   ( ( c ) < 0200 )$/
item_type_name	handler.c	/^char *item_type_name( OBJ_DATA *obj )$/
licensed	fight.c	/^bool licensed ( CHAR_DATA *ch )$/
list_update	update.c	/^void list_update( void )$/
llflag_value	olc.c	/^long long int llflag_value( const struct flag_type/
load_area	db.c	/^void load_area( FILE *fp )$/
load_ban	db.c	/^void load_ban( void )$/
load_basic_types	db.c	/^void load_basic_types()$/
load_char_obj	save.c	/^bool load_char_obj( DESCRIPTOR_DATA *d, char *name/
load_clan_file	clan.c	/^bool load_clan_file( char* fn )$/
load_clans	clan.c	/^void load_clans( void )$/
load_diw_area	db.c	/^void load_diw_area( FILE *fp )$/
load_down_time	db.c	/^void load_down_time( void )$/
load_helps	db.c	/^void load_helps( FILE *fp )$/
load_horse_obj	save.c	/^CHAR_DATA * load_horse_obj( DESCRIPTOR_DATA *d, ch/
load_material	db.c	/^void load_material( FILE *fp )$/
load_mobiles	db.c	/^void load_mobiles( FILE *fp )$/
load_mobprogs	db.c	/^void load_mobprogs( FILE *fp )$/
load_notes	db.c	/^void load_notes( void )$/
load_objects	db.c	/^void load_objects( FILE *fp )$/
load_recall	db.c	/^void load_recall( FILE *fp )$/
load_resets	db.c	/^void load_resets( FILE *fp )$/
load_roomprogs	db.c	/^void load_roomprogs( FILE *fp )$/
load_rooms	db.c	/^void load_rooms( FILE *fp )$/
load_shops	db.c	/^void load_shops( FILE *fp )$/
load_specials	db.c	/^void load_specials( FILE *fp )$/
load_symbol	db.c	/^void load_symbol()$/
log_string	db.c	/^void log_string( const char *str )$/
logf	db.c	/^void logf( char * fmt, ... )$/
longstring	handler.c	/^bool longstring( CHAR_DATA *ch, char *argument )$/
make_corpse	fight.c	/^void make_corpse( CHAR_DATA *killer, CHAR_DATA *ch/
makedrunk	act_comm.c	/^char *makedrunk( char *string, CHAR_DATA *ch )$/
mana_gain	update.c	/^int mana_gain( CHAR_DATA *ch )$/
material_lookup	handler.c	/^OBJ_INDEX_DATA * material_lookup( const char *race/
medit	olc.c	/^void medit( CHAR_DATA *ch, char *argument )$/
medit_align	olc_act.c	/^bool medit_align( CHAR_DATA *ch, char *argument )$/
medit_class	olc_act.c	/^bool medit_class( CHAR_DATA *ch, char *argument )$/
medit_create	olc_act.c	/^bool medit_create( CHAR_DATA *ch, char *argument )/
medit_desc	olc_act.c	/^bool medit_desc( CHAR_DATA *ch, char *argument )$/
medit_level	olc_act.c	/^bool medit_level( CHAR_DATA *ch, char *argument )$/
medit_long	olc_act.c	/^bool medit_long( CHAR_DATA *ch, char *argument )$/
medit_name	olc_act.c	/^bool medit_name( CHAR_DATA *ch, char *argument )$/
medit_shop	olc_act.c	/^bool medit_shop( CHAR_DATA *ch, char *argument )$/
medit_short	olc_act.c	/^bool medit_short( CHAR_DATA *ch, char *argument )$/
medit_show	olc_act.c	/^bool medit_show( CHAR_DATA *ch, char *argument )$/
medit_spec	olc_act.c	/^bool medit_spec( CHAR_DATA *ch, char *argument )$/
meet_req_prime	handler.c	/^bool meet_req_prime(CHAR_DATA * ch,int sn, int att/
meet_req_second	handler.c	/^bool meet_req_second(CHAR_DATA * ch, int sn, int a/
mob_action_update	update.c	/^void mob_action_update( void )$/
mob_ai_lv1	fight.c	/^CHAR_DATA * mob_ai_lv1 (CHAR_DATA *ch)$/
mob_ai_lv2	fight.c	/^CHAR_DATA * mob_ai_lv2 (CHAR_DATA *ch)$/
mob_ai_lv3	fight.c	/^CHAR_DATA * mob_ai_lv3 (CHAR_DATA *ch)$/
mobile_update	update.c	/^void mobile_update( void )$/
mone_hit	fight.c	/^void mone_hit( CHAR_DATA *ch, CHAR_DATA *victim, i/
move_char	act_move.c	/^void move_char( CHAR_DATA *ch, int door )$/
move_gain	update.c	/^int move_gain( CHAR_DATA *ch )$/
mpedit	olc.c	/^void mpedit( CHAR_DATA *ch, char *argument )$/
mprog_act_trigger	mob_prog.c	/^void mprog_act_trigger( char *buf, CHAR_DATA *mob,/
mprog_bribe_trigger	mob_prog.c	/^void mprog_bribe_trigger( CHAR_DATA *mob, CHAR_DAT/
mprog_count	olc_act.c	/^int mprog_count( MOB_INDEX_DATA* pMob )$/
mprog_death_trigger	mob_prog.c	/^void mprog_death_trigger( CHAR_DATA *actor, CHAR_D/
mprog_defun_trigger	mob_prog.c	/^void mprog_defun_trigger(char *txt, CHAR_DATA *ch,/
mprog_do_ifchck	mob_prog.c	/^int \/* bool *\/ mprog_do_ifchck( char *ifchck, CH/
mprog_driver	mob_prog.c	/^void mprog_driver ( char *com_list, CHAR_DATA *mob/
mprog_entry_trigger	mob_prog.c	/^void mprog_entry_trigger( CHAR_DATA *mob )$/
mprog_fight_trigger	mob_prog.c	/^void mprog_fight_trigger( CHAR_DATA *mob, CHAR_DAT/
mprog_file_read	db.c	/^MPROG_DATA* mprog_file_read( char *f, MPROG_DATA */
mprog_give_trigger	mob_prog.c	/^void mprog_give_trigger( CHAR_DATA *mob, CHAR_DATA/
mprog_greet_trigger	mob_prog.c	/^void mprog_greet_trigger( CHAR_DATA *mob )$/
mprog_hitprcnt_trigger	mob_prog.c	/^void mprog_hitprcnt_trigger( CHAR_DATA *mob, CHAR_/
mprog_name_to_type	db.c	/^int mprog_name_to_type ( char *name )$/
mprog_next_command	mob_prog.c	/^char *mprog_next_command( char *clist )$/
mprog_percent_check	mob_prog.c	/^void mprog_percent_check( CHAR_DATA *mob, CHAR_DAT/
mprog_process_cmnd	mob_prog.c	/^void mprog_process_cmnd( char *cmnd, CHAR_DATA *mo/
mprog_process_if	mob_prog.c	/^char *mprog_process_if( char *ifchck, char *com_li/
mprog_random_trigger	mob_prog.c	/^void mprog_random_trigger( CHAR_DATA *mob )$/
mprog_read_programs	db.c	/^void mprog_read_programs( FILE *fp, MOB_INDEX_DATA/
mprog_repop_trigger	mob_prog.c	/^void mprog_repop_trigger( CHAR_DATA *mob )$/
mprog_seval	mob_prog.c	/^bool mprog_seval( char *lhs, char *opr, char *rhs /
mprog_speech_trigger	mob_prog.c	/^void mprog_speech_trigger( char *txt, CHAR_DATA *m/
mprog_talk_trigger	mob_prog.c	/^void mprog_talk_trigger(char *txt, CHAR_DATA *ch, /
mprog_tick_trigger	mob_prog.c	/^void mprog_tick_trigger( CHAR_DATA *mob )$/
mprog_translate	mob_prog.c	/^void mprog_translate( char ch, char *t, CHAR_DATA /
mprog_type_to_name	mob_commands.c	/^char *mprog_type_to_name( int type )$/
mprog_veval	mob_prog.c	/^bool mprog_veval( int lhs, char *opr, int rhs )$/
mprog_wordlist_check	mob_prog.c	/^void mprog_wordlist_check( char *arg, CHAR_DATA *m/
multi_hit	fight.c	/^void multi_hit( CHAR_DATA *ch, CHAR_DATA *victim, /
mwARI	memwatch.c	/^static int mwARI( const char *estr ) {$/
mwAbort	memwatch.c	/^void mwAbort( void ) {$/
mwAriHandler	memwatch.c	/^int mwAriHandler( const char *estr ) {$/
mwAssert	memwatch.c	/^int mwAssert( int exp, const char *exps, const cha/
mwAutoCheck	memwatch.c	/^void mwAutoCheck( int onoff ) {$/
mwAutoInit	memwatch.c	/^static void mwAutoInit( void )$/
mwBUFFER_TO_MW	memwatch.c	/^#define mwBUFFER_TO_MW(p) ( (mwData*) ( ((char*)p)/
mwBreakOut	memwatch.c	/^void mwBreakOut( const char* cause ) {$/
mwCalloc	memwatch.c	/^void* mwCalloc( size_t a, size_t b, const char *fi/
mwCalloc_	memwatch.c	/^void* mwCalloc_( size_t a, size_t b ) {$/
mwCheckOF	memwatch.c	/^int mwCheckOF( const void *p )$/
mwDefaultOutFunc	memwatch.c	/^static void mwDefaultOutFunc( int c ) {$/
mwDoFlush	memwatch.c	/^void mwDoFlush( int onoff ) {$/
mwDrop	memwatch.c	/^unsigned mwDrop( unsigned kb ) {$/
mwDropAll	memwatch.c	/^static void mwDropAll() {$/
mwDrop_	memwatch.c	/^static unsigned mwDrop_( unsigned kb, int type, in/
mwDummy	memwatch.c	/^static char mwDummy( char c )$/
mwFlush	memwatch.c	/^static void mwFlush() {$/
mwFlushNow	memwatch.c	/^void mwFlushNow( void ) {$/
mwFlushR	memwatch.c	/^static int mwFlushR() {$/
mwFlushW	memwatch.c	/^static void mwFlushW( int n ) {$/
mwFree	memwatch.c	/^void mwFree( void* p, const char* file, int line )/
mwFreeUp	memwatch.c	/^static size_t mwFreeUp( size_t needed, int urgent /
mwFree_	memwatch.c	/^void mwFree_( void *p ) {$/
mwGrab	memwatch.c	/^unsigned mwGrab( unsigned kb ) {$/
mwGrabType	memwatch.c	/^static const char *mwGrabType( int type ) {$/
mwGrab_	memwatch.c	/^static unsigned mwGrab_( unsigned kb, int type, in/
mwIncErr	memwatch.c	/^static void mwIncErr() {$/
mwInit	memwatch.c	/^void mwInit( void ) {$/
mwIsHeapOK	memwatch.c	/^static int mwIsHeapOK( mwData *includes_mw ) {$/
mwIsOwned	memwatch.c	/^static int mwIsOwned( mwData* mw, const char *file/
mwIsReadAddr	memwatch.c	/^int mwIsReadAddr( const void *p, unsigned len )$/
mwIsSafeAddr	memwatch.c	/^int mwIsSafeAddr( void *p, unsigned len )$/
mwLimit	memwatch.c	/^void mwLimit( long lim ) {$/
mwLogFile	memwatch.c	/^static void mwLogFile( const char *name ) {$/
mwLogR	memwatch.c	/^static FILE *mwLogR() {$/
mwLogW	memwatch.c	/^static void mwLogW( FILE *p ) {$/
mwMalloc	memwatch.c	/^void* mwMalloc( size_t size, const char* file, int/
mwMalloc_	memwatch.c	/^void* mwMalloc_( size_t size ) {$/
mwMark	memwatch.c	/^void * mwMark( void *p, const char *desc, const ch/
mwMutexInit	memwatch.c	/^static void	mwMutexInit( void )$/
mwMutexLock	memwatch.c	/^static void	mwMutexLock( void )$/
mwMutexTerm	memwatch.c	/^static void	mwMutexTerm( void )$/
mwMutexUnlock	memwatch.c	/^static void	mwMutexUnlock( void )$/
mwNoMansLand	memwatch.c	/^void mwNoMansLand( int level ) {$/
mwRealloc	memwatch.c	/^void* mwRealloc( void *p, size_t size, const char*/
mwRealloc_	memwatch.c	/^void* mwRealloc_( void *p, size_t size ) {$/
mwRelink	memwatch.c	/^static int mwRelink( mwData* mw, const char* file,/
mwSIGSEGV	memwatch.c	/^static void mwSIGSEGV( int n )$/
mwSetAriAction	memwatch.c	/^void mwSetAriAction( int action ) {$/
mwSetAriFunc	memwatch.c	/^void mwSetAriFunc( int (*func)(const char *) ) {$/
mwSetOutFunc	memwatch.c	/^void mwSetOutFunc( void (*func)(int) ) {$/
mwStatAlloc	memwatch.c	/^static void mwStatAlloc( size_t size, const char* /
mwStatFree	memwatch.c	/^static void mwStatFree( size_t size, const char* f/
mwStatGet	memwatch.c	/^static mwStat* mwStatGet( const char *file, int li/
mwStatReport	memwatch.c	/^static void mwStatReport()$/
mwStatistics	memwatch.c	/^void mwStatistics( int level )$/
mwStrCmpI	memwatch.c	/^static int mwStrCmpI( const char *s1, const char */
mwStrdup	memwatch.c	/^char *mwStrdup( const char* str, const char* file,/
mwTerm	memwatch.c	/^void mwTerm( void ) {$/
mwTest	memwatch.c	/^int mwTest( const char *file, int line, int items /
mwTestBuf	memwatch.c	/^static int mwTestBuf( mwData* mw, const char* file/
mwTestBuffer	memwatch.c	/^int mwTestBuffer( const char *file, int line, void/
mwTestMem	memwatch.c	/^static const void * mwTestMem( const void *p, unsi/
mwTestNow	memwatch.c	/^static int mwTestNow( const char *file, int line, /
mwTrace	memwatch.c	/^void mwTrace( const char *format, ... ) {$/
mwUnlink	memwatch.c	/^static void mwUnlink( mwData* mw, const char* file/
mwUnmark	memwatch.c	/^void* mwUnmark( void *p, const char *file, unsigne/
mwVerify	memwatch.c	/^int mwVerify( int exp, const char *exps, const cha/
mwWrite	memwatch.c	/^static void mwWrite( const char *format, ... ) {$/
mwWriteOF	memwatch.c	/^void mwWriteOF( void *p )$/
nanny	comm.c	/^void nanny( DESCRIPTOR_DATA *d, char *argument )$/
new	memwatch.c	/^void* operator new( unsigned size ) {$/
new_affect	mem.c	/^AFFECT_DATA *new_affect( void )$/
new_area	mem.c	/^AREA_DATA *new_area( void )$/
new_auction_data	mem.c	/^AUC_DATA *new_auction_data(  )$/
new_bank	act_obj.c	/^BANK_DATA * new_bank(){$/
new_call_out	mem.c	/^CALL_OUT_DATA * new_call_out()$/
new_character	db.c	/^CHAR_DATA *new_character( bool player )$/
new_clan_data	clan.c	/^CLAN_DATA *new_clan_data(void)$/
new_descriptor	comm.c	/^void new_descriptor( int control )$/
new_exit	mem.c	/^EXIT_DATA *new_exit( void )$/
new_extra_descr	mem.c	/^EXTRA_DESCR_DATA *new_extra_descr( void )$/
new_hiddenpower	mem.c	/^OBJ_HP * new_hiddenpower(void)$/
new_load_area	db.c	/^void new_load_area( FILE *fp )$/
new_load_rooms	db.c	/^void new_load_rooms( FILE *fp )$/
new_mob_index	mem.c	/^MOB_INDEX_DATA *new_mob_index( void )$/
new_obj_index	mem.c	/^OBJ_INDEX_DATA *new_obj_index( void )$/
new_obj_vrace	mem.c	/^OBJ_VRACE *new_obj_vrace(void)$/
new_object	db.c	/^OBJ_DATA *new_object()$/
new_qmark	mem.c	/^QMARK * new_qmark( void )$/
new_qmark_string	mem.c	/^QMARK_STRING * new_qmark_string ( void )$/
new_r_affect	mem.c	/^R_AFFECT_DATA *new_r_affect( void )$/
new_rcall_out	mem.c	/^RCALL_OUT_DATA * new_rcall_out()$/
new_reset	db.c	/^void new_reset( ROOM_INDEX_DATA *pR, RESET_DATA *p/
new_reset_data	mem.c	/^RESET_DATA *new_reset_data( void )$/
new_room_index	mem.c	/^ROOM_INDEX_DATA *new_room_index( void )$/
new_saves_spell	magic.c	/^int new_saves_spell( int pp, CHAR_DATA *victim, in/
new_shop	mem.c	/^SHOP_DATA *new_shop( void )$/
note_attach	act_comm.c	/^void note_attach( CHAR_DATA *ch )$/
note_remove	act_comm.c	/^void note_remove( CHAR_DATA *ch, NOTE_DATA *pnote /
number_argument	interp.c	/^int number_argument( char *argument, char *arg )$/
number_bits	db.c	/^int number_bits( int width )$/
number_door	db.c	/^int number_door( void )$/
number_fuzzy	db.c	/^int number_fuzzy( int number )$/
number_fuzzy2	db.c	/^int number_fuzzy2( int number )$/
number_mm	db.c	/^int number_mm( void )$/
number_percent	db.c	/^int number_percent( void )$/
number_range	db.c	/^int number_range( int from, int to )$/
obj_cast_spell	magic.c	/^void obj_cast_spell( int sn, int level, CHAR_DATA /
obj_from_char	handler.c	/^void obj_from_char( OBJ_DATA *obj )$/
obj_from_obj	handler.c	/^void obj_from_obj( OBJ_DATA *obj )$/
obj_from_room	handler.c	/^void obj_from_room( OBJ_DATA *obj )$/
obj_to_char	handler.c	/^void obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch )$/
obj_to_obj	handler.c	/^void obj_to_obj( OBJ_DATA *obj, OBJ_DATA *obj_to )/
obj_to_room	handler.c	/^void obj_to_room( OBJ_DATA *obj, ROOM_INDEX_DATA */
obj_update	update.c	/^void obj_update( void )$/
oedit	olc.c	/^void oedit( CHAR_DATA *ch, char *argument )$/
oedit_addaffect	olc_act.c	/^bool oedit_addaffect( CHAR_DATA *ch, char *argumen/
oedit_cost	olc_act.c	/^bool oedit_cost( CHAR_DATA *ch, char *argument )$/
oedit_create	olc_act.c	/^bool oedit_create( CHAR_DATA *ch, char *argument )/
oedit_delaffect	olc_act.c	/^bool oedit_delaffect( CHAR_DATA *ch, char *argumen/
oedit_ed	olc_act.c	/^bool oedit_ed( CHAR_DATA *ch, char *argument )$/
oedit_extra	olc_act.c	/^bool oedit_extra( CHAR_DATA *ch, char *argument )$/
oedit_level	olc_act.c	/^bool oedit_level( CHAR_DATA *ch, char *argument )$/
oedit_long	olc_act.c	/^bool oedit_long( CHAR_DATA *ch, char *argument )$/
oedit_material	olc_act.c	/^bool oedit_material( CHAR_DATA *ch, char *argument/
oedit_mtlist	olc_act.c	/^bool oedit_mtlist( CHAR_DATA *ch, char *argument )/
oedit_name	olc_act.c	/^bool oedit_name( CHAR_DATA *ch, char *argument )$/
oedit_oload	olc_act.c	/^bool oedit_oload( CHAR_DATA *ch, char *argument )$/
oedit_short	olc_act.c	/^bool oedit_short( CHAR_DATA *ch, char *argument )$/
oedit_show	olc_act.c	/^bool oedit_show( CHAR_DATA *ch, char *argument )$/
oedit_type	olc_act.c	/^bool oedit_type( CHAR_DATA *ch, char *argument )$/
oedit_value0	olc_act.c	/^bool oedit_value0( CHAR_DATA *ch, char *argument )/
oedit_value1	olc_act.c	/^bool oedit_value1( CHAR_DATA *ch, char *argument )/
oedit_value2	olc_act.c	/^bool oedit_value2( CHAR_DATA *ch, char *argument )/
oedit_value3	olc_act.c	/^bool oedit_value3( CHAR_DATA *ch, char *argument )/
oedit_values	olc_act.c	/^bool oedit_values( CHAR_DATA *ch, char *argument, /
oedit_wear	olc_act.c	/^bool oedit_wear( CHAR_DATA *ch, char *argument )$/
oedit_weight	olc_act.c	/^bool oedit_weight( CHAR_DATA *ch, char *argument )/
oextract_if_endif	mob_prog.c	/^char * oextract_if_endif( char *com_list, OBJ_DATA/
ointerpret	interp.c	/^void ointerpret( OBJ_DATA *obj, CHAR_DATA *ch, cha/
olc_ed_name	olc.c	/^char *olc_ed_name( CHAR_DATA *ch )$/
olc_ed_vnum	olc.c	/^char *olc_ed_vnum( CHAR_DATA *ch )$/
old_load_clan	clan.c	/^void old_load_clan( void )$/
old_mprog_greet_trigger	mob_prog.c	/^void old_mprog_greet_trigger( CHAR_DATA *ch )$/
old_mprog_speech_trigger	mob_prog.c	/^void old_mprog_speech_trigger( char *txt, CHAR_DAT/
one_argument	interp.c	/^char *one_argument( char *argument, char *arg_firs/
one_hit	fight.c	/^void one_hit( CHAR_DATA *ch, CHAR_DATA *victim, in/
oprog_name_to_type	db.c	/^int oprog_name_to_type ( char *name )$/
oprog_process_cmnd	mob_prog.c	/^void oprog_process_cmnd( char *cmnd, OBJ_DATA *obj/
oprog_process_if	mob_prog.c	/^char *oprog_process_if( char *ifchck, char *com_li/
oprog_read_programs	db.c	/^void oprog_read_programs( FILE *fp, OBJ_INDEX_DATA/
oprog_translate	mob_prog.c	/^void oprog_translate( char ch, char *t, OBJ_DATA */
oprog_type_to_name	mob_commands.c	/^char *oprog_type_to_name( int type )$/
pc_breathe	fight.c	/^void pc_breathe( CHAR_DATA *ch )$/
pc_screech	fight.c	/^void pc_screech( CHAR_DATA *ch )$/
pc_spit	fight.c	/^void pc_spit( CHAR_DATA *ch )$/
ppl_spell_acid_blast	magic.c	/^void ppl_spell_acid_blast( int sn, int level, CHAR/
ppl_spell_burning_hands	magic.c	/^void ppl_spell_burning_hands( int sn, int level, C/
ppl_spell_fireball	magic.c	/^void ppl_spell_fireball( int sn, int level, CHAR_D/
ppl_spell_lightning_bolt	magic.c	/^void ppl_spell_lightning_bolt( int sn, int level, /
ppl_spell_powerball	magic.c	/^void ppl_spell_powerball( int sn, int level, CHAR_/
pplmedit_create	olc_act.c	/^bool pplmedit_create( CHAR_DATA *ch, char *argumen/
pploedit_create	olc_act.c	/^bool pploedit_create( CHAR_DATA *ch, char *argumen/
pplredit_create	olc_act.c	/^bool pplredit_create( CHAR_DATA *ch, char *argumen/
process_output	comm.c	/^bool process_output( DESCRIPTOR_DATA *d, bool fPro/
qmark_lookup	handler.c	/^char *qmark_lookup( const char * str)$/
qmark_update	update.c	/^void qmark_update( void )$/
r_affect_bit_name	handler.c	/^char *r_affect_bit_name( long long int vector )$/
r_affect_join	handler.c	/^void r_affect_join( ROOM_INDEX_DATA*ch, R_AFFECT_D/
r_affect_modify	handler.c	/^void r_affect_modify( ROOM_INDEX_DATA *ch, R_AFFEC/
r_affect_remove	handler.c	/^void r_affect_remove( ROOM_INDEX_DATA *ch, R_AFFEC/
r_affect_strip	handler.c	/^void r_affect_strip( ROOM_INDEX_DATA *ch, int sn )/
r_c_dam_message	fight.c	/^void r_c_dam_message( ROOM_INDEX_DATA *ch, CHAR_DA/
r_dam_message	fight.c	/^void r_dam_message( ROOM_INDEX_DATA *ch, CHAR_DATA/
r_damage	fight.c	/^void r_damage( ROOM_INDEX_DATA *ch, CHAR_DATA *vic/
r_is_affected	handler.c	/^bool r_is_affected( ROOM_INDEX_DATA *ch, int sn )$/
race_lookup	handler.c	/^int race_lookup( const char *race )$/
raffect_update	update.c	/^void raffect_update()$/
raw_damage	fight.c	/^void raw_damage( CHAR_DATA *ch, CHAR_DATA *victim,/
raw_kill	fight.c	/^bool raw_kill( CHAR_DATA *ch, CHAR_DATA *victim )$/
rcall_out_update	update.c	/^void rcall_out_update()$/
read_from_buffer	comm.c	/^void read_from_buffer( DESCRIPTOR_DATA *d )$/
read_from_descriptor	comm.c	/^bool read_from_descriptor( DESCRIPTOR_DATA *d )$/
recover	save.c	/^void recover( FILE *fp, long fpos )$/
redit	olc.c	/^void redit( CHAR_DATA *ch, char *argument )$/
redit_create	olc_act.c	/^bool redit_create( CHAR_DATA *ch, char *argument )/
redit_desc	olc_act.c	/^bool redit_desc( CHAR_DATA *ch, char *argument )$/
redit_down	olc_act.c	/^bool redit_down( CHAR_DATA *ch, char *argument )$/
redit_east	olc_act.c	/^bool redit_east( CHAR_DATA *ch, char *argument )$/
redit_ed	olc_act.c	/^bool redit_ed( CHAR_DATA *ch, char *argument )$/
redit_format	olc_act.c	/^bool redit_format( CHAR_DATA *ch, char *argument )/
redit_mlist	olc_act.c	/^bool redit_mlist( CHAR_DATA *ch, char *argument )$/
redit_move	olc_act.c	/^bool redit_move( CHAR_DATA *ch, char *argument )$/
redit_mreset	olc_act.c	/^bool redit_mreset( CHAR_DATA *ch, char *argument )/
redit_mshow	olc_act.c	/^bool redit_mshow( CHAR_DATA *ch, char *argument )$/
redit_name	olc_act.c	/^bool redit_name( CHAR_DATA *ch, char *argument )$/
redit_north	olc_act.c	/^bool redit_north( CHAR_DATA *ch, char *argument )$/
redit_olist	olc_act.c	/^bool redit_olist( CHAR_DATA *ch, char *argument )$/
redit_oreset	olc_act.c	/^bool redit_oreset( CHAR_DATA *ch, char *argument )/
redit_oshow	olc_act.c	/^bool redit_oshow( CHAR_DATA *ch, char *argument )$/
redit_purge	olc_act.c	/^bool redit_purge( CHAR_DATA *ch, char *argument )$/
redit_recall	olc_act.c	/^bool redit_recall( CHAR_DATA *ch, char *argument )/
redit_room	olc_act.c	/^bool redit_room( CHAR_DATA *ch, char *argument )$/
redit_sector	olc_act.c	/^bool redit_sector( CHAR_DATA *ch, char *argument )/
redit_show	olc_act.c	/^bool redit_show( CHAR_DATA *ch, char *argument )$/
redit_south	olc_act.c	/^bool redit_south( CHAR_DATA *ch, char *argument )$/
redit_up	olc_act.c	/^bool redit_up( CHAR_DATA *ch, char *argument )$/
redit_west	olc_act.c	/^bool redit_west( CHAR_DATA *ch, char *argument )$/
registered	fight.c	/^bool registered ( CHAR_DATA *ch, CHAR_DATA *victim/
remove_obj	act_obj.c	/^bool remove_obj( CHAR_DATA *ch, int iWear, bool fR/
remove_protector	act_comm.c	/^void remove_protector( CHAR_DATA *ch)$/
remove_rember	act_comm.c	/^void remove_rember( CHAR_DATA *ch)$/
remove_rrember	act_comm.c	/^void remove_rrember( CHAR_DATA *ch)$/
repair_dura	handler.c	/^void repair_dura( OBJ_DATA *obj ,int value)$/
reset_area	db.c	/^void reset_area( AREA_DATA *pArea )$/
reset_room	db.c	/^void reset_room( ROOM_INDEX_DATA *pRoom )$/
rextract_if_endif	mob_prog.c	/^char * rextract_if_endif( char *com_list, ROOM_IND/
rinterpret	interp.c	/^void rinterpret( ROOM_INDEX_DATA *room, CHAR_DATA /
room_cast_spell	magic.c	/^void room_cast_spell( int sn, int level,  CHAR_DAT/
room_clanlv	handler.c	/^int room_clanlv( ROOM_INDEX_DATA *pRoom)$/
room_is_dark	handler.c	/^bool room_is_dark( ROOM_INDEX_DATA *pRoomIndex )$/
room_is_private	handler.c	/^bool room_is_private( ROOM_INDEX_DATA *pRoomIndex /
room_rand	update.c	/^void room_rand( void )$/
room_time	update.c	/^void room_time( void )$/
rprg_update	update.c	/^void rprg_update( void )$/
rprog_cmd_trigger	mob_prog.c	/^bool rprog_cmd_trigger(ROOM_INDEX_DATA *room, CHAR/
rprog_defun_trigger	mob_prog.c	/^void rprog_defun_trigger(ROOM_INDEX_DATA *room, CH/
rprog_driver	mob_prog.c	/^void rprog_driver ( char *com_list, ROOM_INDEX_DAT/
rprog_entry_trigger	mob_prog.c	/^void rprog_entry_trigger( ROOM_INDEX_DATA *room, C/
rprog_file_read	db.c	/^RPROG_DATA* rprog_file_read( char *f, RPROG_DATA */
rprog_leave_trigger	mob_prog.c	/^void rprog_leave_trigger( ROOM_INDEX_DATA *room, C/
rprog_mask_trigger	mob_prog.c	/^bool rprog_mask_trigger(ROOM_INDEX_DATA *room, CHA/
rprog_name_to_type	db.c	/^int rprog_name_to_type ( char *name )$/
rprog_process_cmnd	mob_prog.c	/^void rprog_process_cmnd( char *cmnd, ROOM_INDEX_DA/
rprog_process_if	mob_prog.c	/^char *rprog_process_if( char *ifchck, char *com_li/
rprog_rand_trigger	mob_prog.c	/^void rprog_rand_trigger( RPROG_DATA *rprg )$/
rprog_read_programs	db.c	/^void rprog_read_programs( FILE *fp, ROOM_INDEX_DAT/
rprog_time_trigger	mob_prog.c	/^void rprog_time_trigger( RPROG_DATA *rprg )$/
rprog_translate	mob_prog.c	/^void rprog_translate( char ch, char *t, ROOM_INDEX/
rprog_trap_trigger	mob_prog.c	/^void rprog_trap_trigger( ROOM_INDEX_DATA *room, CH/
rprog_type_to_name	mob_commands.c	/^char *rprog_type_to_name( int type )$/
rprog_wordlist_check	mob_prog.c	/^bool rprog_wordlist_check( char *arg, ROOM_INDEX_D/
run_olc_editor	olc.c	/^bool run_olc_editor( DESCRIPTOR_DATA *d )$/
save_area	olc_save.c	/^void save_area( AREA_DATA *pArea )$/
save_area_list	olc_save.c	/^void save_area_list()$/
save_char_obj	save.c	/^void save_char_obj( CHAR_DATA *ch )$/
save_helps	olc_save.c	/^void save_helps( FILE *fp, AREA_DATA *pArea )$/
save_horse_obj	save.c	/^void save_horse_obj( CHAR_DATA *ch )$/
save_limbo	olc_save.c	/^void save_limbo( AREA_DATA *pArea )$/
save_material	olc_save.c	/^void save_material( FILE *fp, AREA_DATA *pArea )$/
save_mobiles	olc_save.c	/^void save_mobiles( FILE *fp, AREA_DATA *pArea )$/
save_objects	olc_save.c	/^void save_objects( FILE *fp, AREA_DATA *pArea )$/
save_resets	olc_save.c	/^void save_resets( FILE *fp, AREA_DATA *pArea )$/
save_rooms	olc_save.c	/^void save_rooms( FILE *fp, AREA_DATA *pArea )$/
save_shops	olc_save.c	/^void save_shops( FILE *fp, AREA_DATA *pArea )$/
save_specials	olc_save.c	/^void save_specials( FILE *fp, AREA_DATA *pArea )$/
saves_spell	magic.c	/^int saves_spell( int pp, CHAR_DATA *victim )$/
say_spell	magic.c	/^void say_spell( CHAR_DATA *ch, int sn )$/
scan_print	act_info.c	/^void scan_print(CHAR_DATA *ch, EXIT_DATA *pexit, i/
send_to_all_char	comm.c	/^void send_to_all_char( const char *text )$/
send_to_char	comm.c	/^void send_to_char( const char *txt, CHAR_DATA *ch /
send_to_room	comm.c	/^void send_to_room( const char *txt, ROOM_INDEX_DAT/
set_cname	act_info.c	/^void set_cname( CHAR_DATA *ch, char *cname )$/
set_fighting	fight.c	/^void set_fighting( CHAR_DATA *ch, CHAR_DATA *victi/
set_hname	act_info.c	/^void set_hname( CHAR_DATA *ch, char *cname )$/
set_obj_values	olc_act.c	/^bool set_obj_values( CHAR_DATA *ch, OBJ_INDEX_DATA/
set_qmark	mob_commands.c	/^QMARK *set_qmark( char *arg )$/
set_title	act_info.c	/^void set_title( CHAR_DATA *ch, char *title )$/
set_value	olc_act.c	/^bool set_value( CHAR_DATA *ch, OBJ_INDEX_DATA *pOb/
show_char_to_char	act_info.c	/^void show_char_to_char( CHAR_DATA *list, CHAR_DATA/
show_char_to_char_0	act_info.c	/^void show_char_to_char_0( CHAR_DATA *victim, CHAR_/
show_char_to_char_0b	act_info.c	/^void show_char_to_char_0b( CHAR_DATA *victim, CHAR/
show_char_to_char_1	act_info.c	/^void show_char_to_char_1( CHAR_DATA *victim, CHAR_/
show_class_cmds	olc_act.c	/^void show_class_cmds( CHAR_DATA *ch )$/
show_commands	olc.c	/^bool show_commands( CHAR_DATA *ch, char *argument /
show_flag_cmds	olc_act.c	/^void show_flag_cmds( CHAR_DATA *ch, const struct f/
show_help	olc_act.c	/^bool show_help( CHAR_DATA *ch, char *argument )$/
show_list_to_char	act_info.c	/^void show_list_to_char( OBJ_DATA *list, CHAR_DATA /
show_list_to_char1	act_info.c	/^void show_list_to_char1( char *out, OBJ_DATA *list/
show_mprog	olc_act.c	/^void show_mprog( CHAR_DATA* ch, MPROG_DATA* pMobPr/
show_obj_values	olc_act.c	/^void show_obj_values( CHAR_DATA *ch, OBJ_INDEX_DAT/
show_olc_cmds	olc.c	/^void show_olc_cmds( CHAR_DATA *ch, const struct ol/
show_skill_cmds	olc_act.c	/^void show_skill_cmds( CHAR_DATA *ch, int tar )$/
show_spec_cmds	olc_act.c	/^void show_spec_cmds( CHAR_DATA *ch )$/
show_string	comm.c	/^void show_string( DESCRIPTOR_DATA *d, char *input /
show_version	olc_act.c	/^bool show_version( CHAR_DATA *ch, char *argument )/
skill_lookup	magic.c	/^int skill_lookup( const char *name )$/
smash_tilde	db.c	/^void smash_tilde( char *str )$/
spec_assassin	special.c	/^bool spec_assassin( CHAR_DATA *ch )$/
spec_breath_acid	special.c	/^bool spec_breath_acid( CHAR_DATA *ch )$/
spec_breath_any	special.c	/^bool spec_breath_any( CHAR_DATA *ch )$/
spec_breath_fire	special.c	/^bool spec_breath_fire( CHAR_DATA *ch )$/
spec_breath_frost	special.c	/^bool spec_breath_frost( CHAR_DATA *ch )$/
spec_breath_gas	special.c	/^bool spec_breath_gas( CHAR_DATA *ch )$/
spec_breath_lightning	special.c	/^bool spec_breath_lightning( CHAR_DATA *ch )$/
spec_cast_adept	special.c	/^bool spec_cast_adept( CHAR_DATA *ch )$/
spec_cast_cleric	special.c	/^bool spec_cast_cleric( CHAR_DATA *ch )$/
spec_cast_cold	special.c	/^bool spec_cast_cold( CHAR_DATA *ch )$/
spec_cast_earth	special.c	/^bool spec_cast_earth( CHAR_DATA *ch )$/
spec_cast_fire	special.c	/^bool spec_cast_fire( CHAR_DATA *ch )$/
spec_cast_ghost	special.c	/^bool spec_cast_ghost( CHAR_DATA *ch )$/
spec_cast_judge	special.c	/^bool spec_cast_judge( CHAR_DATA *ch )$/
spec_cast_mage	special.c	/^bool spec_cast_mage( CHAR_DATA *ch )$/
spec_cast_psionicist	special.c	/^bool spec_cast_psionicist( CHAR_DATA *ch )$/
spec_cast_undead	special.c	/^bool spec_cast_undead( CHAR_DATA *ch )$/
spec_cast_water	special.c	/^bool spec_cast_water( CHAR_DATA *ch )$/
spec_cast_wind	special.c	/^bool spec_cast_wind( CHAR_DATA *ch )$/
spec_executioner	special.c	/^bool spec_executioner( CHAR_DATA *ch )$/
spec_fido	special.c	/^bool spec_fido( CHAR_DATA *ch )$/
spec_guard	special.c	/^bool spec_guard( CHAR_DATA *ch )$/
spec_janitor	special.c	/^bool spec_janitor( CHAR_DATA *ch )$/
spec_lookup	special.c	/^SPEC_FUN *spec_lookup( const char *name )	\/* OLC /
spec_mayor	special.c	/^bool spec_mayor( CHAR_DATA *ch )$/
spec_poison	special.c	/^bool spec_poison( CHAR_DATA *ch )$/
spec_repairman	special.c	/^bool spec_repairman( CHAR_DATA *ch )$/
spec_string	special.c	/^char *spec_string( SPEC_FUN *fun )	\/* OLC *\/$/
spec_thief	special.c	/^bool spec_thief( CHAR_DATA *ch )$/
special_bit_name	handler.c	/^char *special_bit_name( int vector )$/
spell_acid_blast	magic.c	/^void spell_acid_blast( int sn, int level, CHAR_DAT/
spell_acid_breath	magic.c	/^void spell_acid_breath( int sn, int level, CHAR_DA/
spell_adrenaline_control	magic.c	/^void spell_adrenaline_control ( int sn, int level,/
spell_agitation	magic.c	/^void spell_agitation ( int sn, int level, CHAR_DAT/
spell_angry_fire_storm	magic.c	/^void spell_angry_fire_storm( int sn, int level, CH/
spell_armageddon	magic.c	/^void spell_armageddon( int sn, int level, CHAR_DAT/
spell_armor	magic.c	/^void spell_armor( int sn, int level, CHAR_DATA *ch/
spell_aura_sight	magic.c	/^void spell_aura_sight ( int sn, int level, CHAR_DA/
spell_awe	magic.c	/^void spell_awe ( int sn, int level, CHAR_DATA *ch,/
spell_ballistic_attack	magic.c	/^void spell_ballistic_attack ( int sn, int level, C/
spell_barrier	magic.c	/^void spell_barrier ( int sn, int level, CHAR_DATA /
spell_biofeedback	magic.c	/^void spell_biofeedback ( int sn, int level, CHAR_D/
spell_bless	magic.c	/^void spell_bless( int sn, int level, CHAR_DATA *ch/
spell_blindness	magic.c	/^void spell_blindness( int sn, int level, CHAR_DATA/
spell_breathe_water	magic.c	/^void spell_breathe_water( int sn, int level, CHAR_/
spell_burning_hands	magic.c	/^void spell_burning_hands( int sn, int level, CHAR_/
spell_call_lightning	magic.c	/^void spell_call_lightning( int sn, int level, CHAR/
spell_calm	magic.c	/^void spell_calm( int sn, int level, CHAR_DATA *ch,/
spell_cause_critical	magic.c	/^void spell_cause_critical( int sn, int level, CHAR/
spell_cause_light	magic.c	/^void spell_cause_light( int sn, int level, CHAR_DA/
spell_cause_serious	magic.c	/^void spell_cause_serious( int sn, int level, CHAR_/
spell_cell_adjustment	magic.c	/^void spell_cell_adjustment ( int sn, int level, CH/
spell_change_sex	magic.c	/^void spell_change_sex( int sn, int level, CHAR_DAT/
spell_charm_person	magic.c	/^void spell_charm_person( int sn, int level, CHAR_D/
spell_chill_touch	magic.c	/^void spell_chill_touch( int sn, int level, CHAR_DA/
spell_clay_golem	magic.c	/^void spell_clay_golem( int sn, int level, CHAR_DAT/
spell_colour_spray	magic.c	/^void spell_colour_spray( int sn, int level, CHAR_D/
spell_combat_mind	magic.c	/^void spell_combat_mind ( int sn, int level, CHAR_D/
spell_cone_of_silence	magic.c	/^void spell_cone_of_silence( int sn, int level, CHA/
spell_continual_light	magic.c	/^void spell_continual_light( int sn, int level, CHA/
spell_control_flames	magic.c	/^void spell_control_flames ( int sn, int level, CHA/
spell_control_weather	magic.c	/^void spell_control_weather( int sn, int level, CHA/
spell_create_food	magic.c	/^void spell_create_food( int sn, int level, CHAR_DA/
spell_create_sound	magic.c	/^void spell_create_sound ( int sn, int level, CHAR_/
spell_create_spring	magic.c	/^void spell_create_spring( int sn, int level, CHAR_/
spell_create_water	magic.c	/^void spell_create_water( int sn, int level, CHAR_D/
spell_cure_blindness	magic.c	/^void spell_cure_blindness( int sn, int level, CHAR/
spell_cure_critical	magic.c	/^void spell_cure_critical( int sn, int level, CHAR_/
spell_cure_light	magic.c	/^void spell_cure_light( int sn, int level, CHAR_DAT/
spell_cure_poison	magic.c	/^void spell_cure_poison( int sn, int level, CHAR_DA/
spell_cure_serious	magic.c	/^void spell_cure_serious( int sn, int level, CHAR_D/
spell_curse	magic.c	/^void spell_curse( int sn, int level, CHAR_DATA *ch/
spell_day_of_power	magic.c	/^void spell_day_of_power( int sn, int level, CHAR_D/
spell_day_of_prot	magic.c	/^void spell_day_of_prot( int sn, int level, CHAR_DA/
spell_death_field	magic.c	/^void spell_death_field ( int sn, int level, CHAR_D/
spell_demontremor	magic.c	/^void spell_demontremor( int sn, int level, CHAR_DA/
spell_destroy_cursed	magic.c	/^void spell_destroy_cursed( int sn, int level, CHAR/
spell_detect_evil	magic.c	/^void spell_detect_evil( int sn, int level, CHAR_DA/
spell_detect_hidden	magic.c	/^void spell_detect_hidden( int sn, int level, CHAR_/
spell_detect_invis	magic.c	/^void spell_detect_invis( int sn, int level, CHAR_D/
spell_detect_magic	magic.c	/^void spell_detect_magic( int sn, int level, CHAR_D/
spell_detect_poison	magic.c	/^void spell_detect_poison( int sn, int level, CHAR_/
spell_detonate	magic.c	/^void spell_detonate ( int sn, int level, CHAR_DATA/
spell_disintegrate	magic.c	/^void spell_disintegrate ( int sn, int level, CHAR_/
spell_dispel_evil	magic.c	/^void spell_dispel_evil( int sn, int level, CHAR_DA/
spell_dispel_magic	magic.c	/^void spell_dispel_magic ( int sn, int level, CHAR_/
spell_displacement	magic.c	/^void spell_displacement ( int sn, int level, CHAR_/
spell_divine_light	magic.c	/^void spell_divine_light( int sn, int level, CHAR_D/
spell_domination	magic.c	/^void spell_domination ( int sn, int level, CHAR_DA/
spell_double_heal	magic.c	/^void spell_double_heal( int sn, int level, CHAR_DA/
spell_double_recharge	magic.c	/^void spell_double_recharge( int sn, int level, CHA/
spell_earth_slash	magic.c	/^void spell_earth_slash( int sn, int level, CHAR_DA/
spell_earthquake	magic.c	/^void spell_earthquake( int sn, int level, CHAR_DAT/
spell_ectoplasmic_form	magic.c	/^void spell_ectoplasmic_form ( int sn, int level, C/
spell_ego_whip	magic.c	/^void spell_ego_whip ( int sn, int level, CHAR_DATA/
spell_enchant_weapon	magic.c	/^void spell_enchant_weapon( int sn, int level, CHAR/
spell_endless_sight	magic.c	/^void spell_endless_sight( int sn, int level, CHAR_/
spell_energy_containment	magic.c	/^void spell_energy_containment ( int sn, int level,/
spell_energy_drain	magic.c	/^void spell_energy_drain( int sn, int level, CHAR_D/
spell_enhance_armor	magic.c	/^void spell_enhance_armor (int sn, int level, CHAR_/
spell_enhanced_strength	magic.c	/^void spell_enhanced_strength ( int sn, int level, /
spell_exorcise	magic.c	/^void spell_exorcise( int sn, int level, CHAR_DATA /
spell_faerie_fire	magic.c	/^void spell_faerie_fire( int sn, int level, CHAR_DA/
spell_faerie_fog	magic.c	/^void spell_faerie_fog( int sn, int level, CHAR_DAT/
spell_fire_breath	magic.c	/^void spell_fire_breath( int sn, int level, CHAR_DA/
spell_fire_elemental	magic.c	/^void spell_fire_elemental( int sn, int level, CHAR/
spell_fire_wall	magic.c	/^void spell_fire_wall( int sn, int level, CHAR_DATA/
spell_fireball	magic.c	/^void spell_fireball( int sn, int level, CHAR_DATA /
spell_flamestrike	magic.c	/^void spell_flamestrike( int sn, int level, CHAR_DA/
spell_flaming	magic.c	/^void spell_flaming( int sn, int level, CHAR_DATA */
spell_flaming_armor	magic.c	/^void spell_flaming_armor( int sn, int level, CHAR_/
spell_flaming_slash	magic.c	/^void spell_flaming_slash( int sn, int level, CHAR_/
spell_flesh_armor	magic.c	/^void spell_flesh_armor ( int sn, int level, CHAR_D/
spell_fly	magic.c	/^void spell_fly( int sn, int level, CHAR_DATA *ch, /
spell_frost_breath	magic.c	/^void spell_frost_breath( int sn, int level, CHAR_D/
spell_full_heal	magic.c	/^void spell_full_heal ( int sn, int level, CHAR_DAT/
spell_full_recharge	magic.c	/^void spell_full_recharge( int sn, int level, CHAR_/
spell_full_refresh	magic.c	/^void spell_full_refresh( int sn, int level, CHAR_D/
spell_gas_breath	magic.c	/^void spell_gas_breath( int sn, int level, CHAR_DAT/
spell_gate	magic.c	/^void spell_gate( int sn, int level, CHAR_DATA *ch,/
spell_general_purpose	magic.c	/^void spell_general_purpose( int sn, int level, CHA/
spell_giant_strength	magic.c	/^void spell_giant_strength( int sn, int level, CHAR/
spell_glacier_strike	magic.c	/^void spell_glacier_strike( int sn, int level, CHAR/
spell_grave_robber	magic.c	/^void spell_grave_robber( int sn, int level, CHAR_D/
spell_green_breath	magic.c	/^void spell_green_breath( int sn, int level, CHAR_D/
spell_group_cure_blindness	magic.c	/^void spell_group_cure_blindness( int sn, int level/
spell_group_double_heal	magic.c	/^void spell_group_double_heal( int sn, int level, C/
spell_group_full_heal	magic.c	/^void spell_group_full_heal( int sn, int level, CHA/
spell_group_full_refresh	magic.c	/^void spell_group_full_refresh( int sn, int level, /
spell_harm	magic.c	/^void spell_harm( int sn, int level, CHAR_DATA *ch,/
spell_hasten	magic.c	/^void spell_hasten( int sn, int level, CHAR_DATA *c/
spell_heal	magic.c	/^void spell_heal( int sn, int level, CHAR_DATA *ch,/
spell_high_explosive	magic.c	/^void spell_high_explosive( int sn, int level, CHAR/
spell_identify	magic.c	/^void spell_identify( int sn, int level, CHAR_DATA /
spell_inertial_barrier	magic.c	/^void spell_inertial_barrier ( int sn, int level, C/
spell_inflict_pain	magic.c	/^void spell_inflict_pain ( int sn, int level, CHAR_/
spell_infravision	magic.c	/^void spell_infravision( int sn, int level, CHAR_DA/
spell_intellect_fortress	magic.c	/^void spell_intellect_fortress ( int sn, int level,/
spell_invis	magic.c	/^void spell_invis( int sn, int level, CHAR_DATA *ch/
spell_know_alignment	magic.c	/^void spell_know_alignment( int sn, int level, CHAR/
spell_lend_health	magic.c	/^void spell_lend_health ( int sn, int level, CHAR_D/
spell_levitation	magic.c	/^void spell_levitation ( int sn, int level, CHAR_DA/
spell_lifeshare	magic.c	/^void spell_lifeshare( int sn, int level, CHAR_DATA/
spell_lifesteal	magic.c	/^void spell_lifesteal( int sn, int level, CHAR_DATA/
spell_lightning_bolt	magic.c	/^void spell_lightning_bolt( int sn, int level, CHAR/
spell_lightning_breath	magic.c	/^void spell_lightning_breath( int sn, int level, CH/
spell_locate_object	magic.c	/^void spell_locate_object( int sn, int level, CHAR_/
spell_lore	magic.c	/^void spell_lore( int sn, int level, CHAR_DATA *ch,/
spell_magic_arrow	magic.c	/^void spell_magic_arrow( int sn, int level, CHAR_DA/
spell_magic_missile	magic.c	/^void spell_magic_missile( int sn, int level, CHAR_/
spell_mana_recharge	magic.c	/^void spell_mana_recharge( int sn, int level, CHAR_/
spell_mana_shield	magic.c	/^void spell_mana_shield( int sn, int level, CHAR_DA/
spell_mass_heal	magic.c	/^void spell_mass_heal( int sn, int level, CHAR_DATA/
spell_mass_invis	magic.c	/^void spell_mass_invis( int sn, int level, CHAR_DAT/
spell_mental_empower	magic.c	/^void spell_mental_empower( int sn, int level, CHAR/
spell_mind_thrust	magic.c	/^void spell_mind_thrust ( int sn, int level, CHAR_D/
spell_mute	magic.c	/^void spell_mute( int sn, int level, CHAR_DATA *ch,/
spell_mystic_armor	magic.c	/^void spell_mystic_armor( int sn, int level, CHAR_D/
spell_mystic_mirror	magic.c	/^void spell_mystic_mirror( int sn, int level, CHAR_/
spell_null	magic.c	/^void spell_null( int sn, int level, CHAR_DATA *ch,/
spell_paralyze	magic.c	/^void spell_paralyze( int sn, int level, CHAR_DATA /
spell_pass_door	magic.c	/^void spell_pass_door( int sn, int level, CHAR_DATA/
spell_pcold	magic.c	/^void spell_pcold( int sn, int level, CHAR_DATA *ch/
spell_pearth	magic.c	/^void spell_pearth( int sn, int level, CHAR_DATA *c/
spell_pfire	magic.c	/^void spell_pfire( int sn, int level, CHAR_DATA *ch/
spell_poison	magic.c	/^void spell_poison( int sn, int level, CHAR_DATA *c/
spell_polymorph_other	magic.c	/^void spell_polymorph_other( int sn, int level, CHA/
spell_powerball	magic.c	/^void spell_powerball( int sn, int level, CHAR_DATA/
spell_project_force	magic.c	/^void spell_project_force ( int sn, int level, CHAR/
spell_protection	magic.c	/^void spell_protection( int sn, int level, CHAR_DAT/
spell_psionic_blast	magic.c	/^void spell_psionic_blast ( int sn, int level, CHAR/
spell_psychic_crush	magic.c	/^void spell_psychic_crush ( int sn, int level, CHAR/
spell_psychic_drain	magic.c	/^void spell_psychic_drain ( int sn, int level, CHAR/
spell_psychic_healing	magic.c	/^void spell_psychic_healing ( int sn, int level, CH/
spell_pwind	magic.c	/^void spell_pwind( int sn, int level, CHAR_DATA *ch/
spell_recharge_item	magic.c	/^void spell_recharge_item ( int sn, int level, CHAR/
spell_refresh	magic.c	/^void spell_refresh( int sn, int level, CHAR_DATA */
spell_remove_alignment	magic.c	/^void spell_remove_alignment( int sn, int level, CH/
spell_remove_curse	magic.c	/^void spell_remove_curse( int sn, int level, CHAR_D/
spell_remove_nodrop	magic.c	/^void spell_remove_nodrop ( int sn, int level, CHAR/
spell_remove_silence	magic.c	/^void spell_remove_silence( int sn, int level, CHAR/
spell_repair_armor	magic.c	/^void spell_repair_armor( int sn, int level, CHAR_D/
spell_resurrection	magic.c	/^void spell_resurrection( int sn, int level, CHAR_D/
spell_sanctuary	magic.c	/^void spell_sanctuary( int sn, int level, CHAR_DATA/
spell_seal_magic	magic.c	/^void spell_seal_magic( int sn, int level, CHAR_DAT/
spell_share_strength	magic.c	/^void spell_share_strength ( int sn, int level, CHA/
spell_shield	magic.c	/^void spell_shield( int sn, int level, CHAR_DATA *c/
spell_shocking_grasp	magic.c	/^void spell_shocking_grasp( int sn, int level, CHAR/
spell_sleep	magic.c	/^void spell_sleep( int sn, int level, CHAR_DATA *ch/
spell_sober_up	magic.c	/^void spell_sober_up( int sn, int level, CHAR_DATA /
spell_soulsteal	magic.c	/^void spell_soulsteal( int sn, int level, CHAR_DATA/
spell_starfire	magic.c	/^void spell_starfire( int sn, int level, CHAR_DATA /
spell_stone_skin	magic.c	/^void spell_stone_skin( int sn, int level, CHAR_DAT/
spell_summon	magic.c	/^void spell_summon( int sn, int level, CHAR_DATA *c/
spell_sun_flash	magic.c	/^void spell_sun_flash( int sn, int level, CHAR_DATA/
spell_tardy	magic.c	/^void spell_tardy( int sn, int level, CHAR_DATA *ch/
spell_teleport	magic.c	/^void spell_teleport( int sn, int level, CHAR_DATA /
spell_thought_shield	magic.c	/^void spell_thought_shield ( int sn, int level, CHA/
spell_turn_undead	magic.c	/^void spell_turn_undead( int sn, int level, CHAR_DA/
spell_ultrablast	magic.c	/^void spell_ultrablast ( int sn, int level, CHAR_DA/
spell_vampiric_bite	magic.c	/^void spell_vampiric_bite( int sn, int level, CHAR_/
spell_ventriloquate	magic.c	/^void spell_ventriloquate( int sn, int level, CHAR_/
spell_virtual_swords	magic.c	/^void spell_virtual_swords( int sn, int level, CHAR/
spell_vivification	magic.c	/^void spell_vivification( int sn, int level, CHAR_D/
spell_water_spirit	magic.c	/^void spell_water_spirit( int sn, int level, CHAR_D/
spell_weaken	magic.c	/^void spell_weaken( int sn, int level, CHAR_DATA *c/
spell_whirlwind	magic.c	/^void spell_whirlwind( int sn, int level, CHAR_DATA/
spell_wind_screaming	magic.c	/^void spell_wind_screaming( int sn, int level, CHAR/
spell_wizard_rage	magic.c	/^void spell_wizard_rage( int sn, int level, CHAR_DA/
spell_word_of_recall	magic.c	/^void spell_word_of_recall( int sn, int level, CHAR/
stat_color	act_info.c	/^char* stat_color(int cur, int max)$/
stat_color1	fight.c	/^char* stat_color1(int cur, int max)$/
stop_fighting	fight.c	/^void stop_fighting( CHAR_DATA *ch, bool fBoth )$/
stop_follower	act_comm.c	/^void stop_follower( CHAR_DATA *ch )$/
stop_idling	comm.c	/^void stop_idling( CHAR_DATA *ch )$/
stop_protecting	act_comm.c	/^void stop_protecting( CHAR_DATA *ch, CHAR_DATA *pc/
stop_rember	act_comm.c	/^void stop_rember( CHAR_DATA *ch, CHAR_DATA *pch)$/
stop_rrember	act_comm.c	/^void stop_rrember( ROOM_INDEX_DATA *ch, CHAR_DATA /
str_cmp	db.c	/^bool str_cmp( const char *astr, const char *bstr )/
str_dup	ssm.c	/^char *str_dup( const char *str )$/
str_infix	db.c	/^bool str_infix( const char *astr, const char *bstr/
str_prefix	db.c	/^bool str_prefix( const char *astr, const char *bst/
str_suffix	db.c	/^bool str_suffix( const char *astr, const char *bst/
string_add	string.c	/^void string_add( CHAR_DATA *ch, char *argument )$/
string_append	string.c	/^void string_append( CHAR_DATA *ch, char **pString /
string_edit	string.c	/^void string_edit( CHAR_DATA *ch, char **pString )$/
string_proper	string.c	/^char * string_proper( char * argument )$/
string_replace	string.c	/^char * string_replace( char * orig, char * old, ch/
string_unpad	string.c	/^char * string_unpad( char * argument )$/
strip_ansi	chinese.c	/^void strip_ansi(char* src, char* dup)$/
strstr	mob_prog.bak.c	/^char * strstr(s1,s2) const char *s1; const char *s/
symbol_lookup	handler.c	/^long long int symbol_lookup(char *name)$/
tail_chain	db.c	/^void tail_chain( void )$/
talk_channel	act_comm.c	/^void talk_channel( CHAR_DATA *ch, char *argument, /
temp_fread_string	ssm.c	/^void temp_fread_string( FILE *fp, char *buf )$/
temp_hash_add	ssm.c	/^void temp_hash_add( char *str )$/
temp_hash_find	ssm.c	/^char *temp_hash_find( const char *str )$/
time_update	update.c	/^void time_update( void )$/
top10_check	act_info.c	/^void top10_check( CHAR_DATA * ch )$/
top10_load	db.c	/^void top10_load()$/
top10_remove	act_info.c	/^void top10_remove( TOP10_DATA * td, CHAR_DATA * ch/
top10_save	db.c	/^void top10_save()$/
track_hunt	fight.c	/^void track_hunt( CHAR_DATA *ch, CHAR_DATA *victim,/
trigger_obj_hp	fight.c	/^void trigger_obj_hp( OBJ_DATA *obj, int sn,int lev/
unequip_char	handler.c	/^void unequip_char( CHAR_DATA *ch, OBJ_DATA *obj )$/
update_handler	update.c	/^void update_handler( void )$/
update_pos	fight.c	/^void update_pos( CHAR_DATA *victim )$/
use_magical_item	fight.c	/^void use_magical_item( CHAR_DATA *ch )\/*{{{*\/$/
violence_update	fight.c	/^void violence_update( void )$/
vsave_resets	olc_save.c	/^void vsave_resets( FILE *fp, AREA_DATA *pArea )$/
vsave_shops	olc_save.c	/^void vsave_shops( FILE *fp, AREA_DATA *pArea )$/
vsave_specials	olc_save.c	/^void vsave_specials( FILE *fp, AREA_DATA *pArea )$/
waste_dura	handler.c	/^void waste_dura( OBJ_DATA *obj )$/
weakness_damage	magic.c	/^int weakness_damage( CHAR_DATA *ch, int sn)$/
weakness_percent	magic.c	/^int weakness_percent( CHAR_DATA *ch, int sn)$/
wear_bit	olc_act.c	/^int wear_bit(int loc)$/
wear_bit_name	handler.c	/^char *wear_bit_name( int vector )$/
wear_loc	olc_act.c	/^int wear_loc(int bits, int count)$/
wear_obj	act_obj.c	/^void wear_obj( CHAR_DATA *ch, OBJ_DATA *obj, bool /
weather_update	update.c	/^void weather_update( void )$/
write_to_buffer	comm.c	/^void write_to_buffer( DESCRIPTOR_DATA *d, const ch/
write_to_descriptor	comm.c	/^bool write_to_descriptor( int desc, char *txt, int/
xp_compute	fight.c	/^int xp_compute( CHAR_DATA *gch, CHAR_DATA *victim /
zact	interp.c	/^void zact( const char *format, CHAR_DATA *ch, cons/